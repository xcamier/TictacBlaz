@typeparam TTypeOfCharacteristic where TTypeOfCharacteristic: class, IId

@using tictacApp.Services
@using tictacApp.Data
@using tictacApp.Helpers
@using tictacApp.Interfaces
@using tictacApp.ViewModels

@using AutoMapper

@inject IGenericCRUDServiceWithParents CharacteristicsService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

@inject IMapper Mapper

@inject ItemSelectionService<CharacteristicView, TTypeOfCharacteristic> ItemSelectionService


<ListTemplate PageTitle="Characteristic Selection" Loading=@_loading Error=@_error ErrorMessage=@_errorMessage>

    <BreadcrumbContent>
        <MudBreadcrumbs Items="_path">
            <ItemTemplate Context="item">
                <MudButton Variant="Variant.Text" StartIcon="@item.Icon" Size="Size.Small" OnClick="@(() => GoToSubCharacteristic(@item.Href))">@item.Text</MudButton>
            </ItemTemplate>
        </MudBreadcrumbs>
    </BreadcrumbContent>

    <ButtonsAreaContent>
        <MudButton StartIcon="@AppIcons.Add" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" 
                    OnClick="OnCancel">Cancel</MudButton>
    </ButtonsAreaContent>

    <FiltersAreaContent>
        <MudSwitch T="bool" Color="Color.Primary" Label="Closed Only"
                    Checked="@_displayClosedOnly" CheckedChanged="@(async (e) => await DisplayClosedChanged(this, e))"  />
    </FiltersAreaContent>

    <ListAreaContent>
        <MudTable Items="@_characteristics" Loading="@_loading" LoadingProgressColor="Color.Info"
                    Class="ml-2 mr-2 mt-4" Hover="true" Breakpoint="Breakpoint.Sm" >
            <ColGroup>
                <col />
                @if (_canGoOneLevelAbove)
                {
                    <col />
                }
                <col style="width: 120px;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh>Primary Description</MudTh>
                @if (_canGoOneLevelAbove)
                {
                    <MudTh>Secondary Description</MudTh>
                }
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Label">@context.Label</MudTd>
                @if (_canGoOneLevelAbove)
                {
                    <MudTd DataLabel="Label">@context.Description</MudTd>
                }
                <MudTd DataLabel="Actions">
                    @if (_canGoOneLevelAbove)
                    {
                        <MudIconButton Size="@Size.Small" Icon="@AppIcons.View" OnClick="@(() => GoToSubCharacteristic(context.Id))" />
                    }
                    <MudIconButton Size="@Size.Small" Icon="@AppIcons.Select" OnClick="@(() => @Select(context))" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </ListAreaContent>

</ListTemplate>


@code {
    [Parameter]
    public int? ParentCharacteristicId { get; set; } = null;

    [Parameter]
    public string SubItemRootUri { get; set; } = "/";

    [Parameter]
    public string ReturnAddUri { get; set; } = "/";

    [Parameter]
    public string ReturnEditUri { get; set; } = "/";

    bool _displayClosedOnly = false;
    private List<BreadcrumbItem> _path = new List<BreadcrumbItem>();
    private Characteristic[]? _characteristics;
    private bool _loading = false;
    private bool _error = false;
    private string _errorMessage = string.Empty;

    private bool _canGoOneLevelAbove = true;

    protected override async Task OnInitializedAsync()
    {
        await BuildBreadcrumb();
        await GetCharacteristicsAsync();
    }

    private async Task BuildBreadcrumb()
    {
        KeyValuePair<int, string?>[] parentCharacteristics = await CharacteristicsService.GetParentsAsync<Characteristic>(ParentCharacteristicId);
        _path = BreadcrumbHelper.BuildBreadcrumb("Characteristics", SubItemRootUri, parentCharacteristics);
        _canGoOneLevelAbove = _path.Count < 3;
    }

    private async Task GetCharacteristicsAsync()
    {
        try
        {
            _loading = true;
            _characteristics = await CharacteristicsService.GetAllAsync<Characteristic>(ParentCharacteristicId, _displayClosedOnly);
        }
        finally
        {
            _loading = false;
        }
    }

    private void GoToSubCharacteristic(int subCharacteristicId)
    {
        GoToSubCharacteristic($"/{SubItemRootUri}/{subCharacteristicId}");
    }

    private void GoToSubCharacteristic(string url)
    {
        Navigation.NavigateTo(url, true);
    }

    private void Select(Characteristic selectedCharacteristic)
    {
        CharacteristicView res = Mapper.Map<CharacteristicView>(selectedCharacteristic);

        ItemSelectionService.HasSelected = true;
        ItemSelectionService.Selection.Add(res);

        NavigateBackToCaller();
    }

    private void OnCancel()
    {
        ItemSelectionService.HasSelected = false;

        NavigateBackToCaller();     
    }

    private void NavigateBackToCaller()
    {
        string uri = ItemSelectionService.IsAdd ? 
                        ReturnAddUri : 
                        ReturnEditUri;

        Navigation.NavigateTo(uri);
    }

    private async Task DisplayClosedChanged(object Sender, bool newValue)
    {
        _displayClosedOnly = newValue;
        await GetCharacteristicsAsync();
    }
}