@using tictacApp.Data
@using tictacApp.Helpers
@using tictacApp.Validators

<MudForm Model="@Tag" 
    @ref="@_form" Validation="@(_validator.ValidateValue)" ValidationDelay="0">

    <MudGrid Justify="Justify.Center" Class="mt-2">
        <MudItem xs="6" >
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@_mode Tag</MudText>
                    </CardHeaderContent>
                </MudCardHeader>

                @if (Tag is not null)
                {
                    <MudCardContent>                        
                        <MudTextField T="string" Label="Label" Variant="Variant.Text" 
                                        @bind-Value="Tag.Label" For="@(() => Tag.Label)" 
                                        Immediate="true"/>
                    </MudCardContent>
                    <MudCardActions Class="d-flex justify-space-between">                                
                        <MudButton Variant="Variant.Filled" Disabled="@Busy" 
                                    Color="Color.Primary"  
                                    OnClick="@(async () => await HandleSubmitAsync(true))">@_mode</MudButton>
                        
                        <MudButton Variant="Variant.Filled" Disabled="@Busy" 
                                    Color="Color.Primary" 
                                    OnClick="@(async () => await CancelAsync())">Cancel</MudButton>
                    </MudCardActions>
                }
            </MudCard>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public bool IsAdd { get; set; }

    [Parameter]
    public Tag? Tag { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    private string _mode => IsAdd ? "Add" : "Edit";
    private MudForm _form;
    private LabelFluentValidator<Tag> _validator = 
                new LabelFluentValidator<Tag>(Constants.LabelMinLength, Constants.LabelShortLength);

    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    private async Task<Task> HandleSubmitAsync(bool isValid)
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            return ValidationResult.InvokeAsync(true);
        }

        return ValidationResult.InvokeAsync(false);
    }
}