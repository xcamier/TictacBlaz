@typeparam TPlannedActivity where TPlannedActivity: PlannedActivity

@using tictacApp.Data
@using tictacApp.Helpers
@using tictacApp.Validators
@using tictacApp.Interfaces
@using tictacApp.ViewModels
@using AutoMapper

@inject IMapper Mapper
@inject IPlannedActivityCRUDService CRUDService

<AddEditTemplate 
    PageTitle=@_pageTitle
    Error=@Error
    ErrorMessage=@ErrorMessage
    Busy=@Busy 
    Mode=@_mode
    CancelRequest="CancelAsync"
    ValidationRequest="ValidationRequestAsync" >

    <AddEditContent>

        @if (PlannedActivity is not null)
        {
            <MudCardContent>  
                <MudForm Model="@PlannedActivity"
                    @ref="@_form" Validation="@(_validator.ValidateValue)" ValidationDelay="0">

                    <MudTextField T="string" Label="Label" Variant="Variant.Text" 
                                    @bind-Value="PlannedActivity.Label" For="@(() => PlannedActivity.Label)" 
                                    Immediate="true"/>

                    <MudTextField T="string" Label="Description" Variant="Variant.Text" Lines="3" 
                                    @bind-Value="PlannedActivity.Description" For="@(() => PlannedActivity.Description)" 
                                    Immediate="true"/>

                    <MudDatePicker Label="Target date" Placeholder="Select Date"
                                Editable="true" DisableToolbar="true"
                                @bind-Date="PlannedActivity.TargetDate" For="@(() => PlannedActivity.TargetDate)" />

                    <MudGrid Class="mt-4">
                        <MudItem xs="6">
                            <MudSwitch  Label=@GetStatusLabel() 
                                        Color="Color.Error" UnCheckedColor="Color.Success"
                                        @bind-Checked="@PlannedActivity.IsBehind" For="@(() => PlannedActivity.IsBehind)"/>
                        </MudItem>
                        <MudItem xs="2">
                            <MudTextField Label="Completion" 
                                            Adornment="Adornment.End" AdornmentText="%"
                                            @bind-Value="PlannedActivity.CompletionPercent"  For="@(() => PlannedActivity.CompletionPercent)"
                                            Immediate="true"/>
                        </MudItem>
                        <MudItem xs="4" Class="d-flex align-center">
                            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Calculate" Size="Size.Small"
                                    OnClick="@(() => AutoCalcChange(PlannedActivity.Id))" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudSwitch  Label="Finalized" Color="Color.Info" 
                                        @bind-Checked="@PlannedActivity.IsFinalized" For="@(() => PlannedActivity.IsFinalized)"/>
                        </MudItem>
                        <MudItem xs="6">
                            <MudDatePicker Label="Finalization date" Placeholder="Select Date"
                                        Editable="true" DisableToolbar="true" Disabled="@(!PlannedActivity.IsFinalized)"
                                        @bind-Date="PlannedActivity.FinalizationDate" For="@(() => PlannedActivity.FinalizationDate)" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudSwitch  Label="Closed" Color="Color.Info" 
                                        @bind-Checked="@PlannedActivity.IsClosed" For="@(() => PlannedActivity.IsClosed)"/>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudCardContent>
        }

    </AddEditContent>
</AddEditTemplate>

<!-- The comments area -->
@if (!IsAdd)
{
    <MudGrid Justify="Justify.Center" Class="mt-2">
        <MudItem xs="6">

            <MudItem xs="12">
                <MudDivider />
            </MudItem>
            <MudItem xs="12" Class="mt-2">
                <CommentsAreaComponent
                    Comments=@_comments
                    Busy=@Busy
                    AddComment="@(async (comment) => await AddCommentAsync(comment))"
                    EditComment="@(async (comment) => await EditCommentAsync(comment))"
                    DeleteComment="@(async (comment) => await DeleteCommentAsync(comment))">
                
                </CommentsAreaComponent>
            </MudItem>

        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public bool IsAdd { get; set; }

    [Parameter]
    public TPlannedActivity? PlannedActivity { get; set; }

    [Parameter]
    public EventCallback<CommentView> AddComment { get; set; }

    [Parameter]
    public EventCallback<CommentView> EditComment { get; set; }

    [Parameter]
    public EventCallback<CommentView> DeleteComment { get; set; }

    [Parameter]
    public string Context { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    [Parameter]
    public bool Error { get; set; }

    [Parameter]
    public string ErrorMessage { get; set; }

    private string _mode => IsAdd ? "Add" : "Edit";
    private MudForm _form;
    private string _pageTitle = string.Empty;
    private CommentView[]? _comments;

    private LabelAndDescriptionFluentValidator<TPlannedActivity> _validator = 
                new LabelAndDescriptionFluentValidator<TPlannedActivity>(Constants.LabelMinLength, 
                                                                    Constants.LabelLongLength, 
                                                                    Constants.DescriptionStandardLength);

    protected override void OnParametersSet()
    {
        if (PlannedActivity is not null && PlannedActivity.Comments is not null)
        {
            _comments = Mapper.Map<ICollection<Comment>, CommentView[]>(PlannedActivity.Comments);
        }

        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        _pageTitle = $"{_mode} {Context}";

        base.OnInitialized();
    }

    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    private Task ValidationRequestAsync()
    {
         _form.Validate();
        if (_form.IsValid)
        {
            return ValidationResult.InvokeAsync(true);
        }

        return ValidationResult.InvokeAsync(false);
    }

    //Addition request is received from the sub component that displays the comment
    //The request is transmitted to the parent component
    private async Task<Task> AddCommentAsync(CommentView comment)
    {
        return AddComment.InvokeAsync(comment);
    }

    //Edition request is received from the sub component that displays the comment
    //The request is transmitted to the parent component
    private async Task<Task> EditCommentAsync(CommentView comment)
    {
        return EditComment.InvokeAsync(comment);
    }

    //Comment deletion request is received from the sub component that displays the comment
    //the request is transmitted to the parent component
    private async Task<Task> DeleteCommentAsync(CommentView comment)
    {
        return DeleteComment.InvokeAsync(comment);
    }

    private string GetStatusLabel() 
            => (PlannedActivity is null || PlannedActivity.IsBehind) ? 
                                                ProgressStatus.Behind : 
                                                ProgressStatus.OnTrack;

    private void AutoCalcChange(int Id)
    {
        if (PlannedActivity is not null)
        {
            Tuple<int, int> values = new Tuple<int, int>(0,0);
            CRUDService.GetSumOfCompletionOfChildren<TPlannedActivity>(Id, ref values);
            double total = 0d;
            if (values.Item1 != 0)
            {
                total = Math.Round((double)values.Item2 / (double)values.Item1, MidpointRounding.AwayFromZero);
            }
            PlannedActivity.CompletionPercent = (int)total;
        }
    }
}