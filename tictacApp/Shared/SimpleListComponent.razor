@using tictacApp.Helpers
@using tictacApp.Interfaces

@typeparam TItem where TItem: class, IIdLabel

@inject IGenericCRUDService CRUDService
@inject ISnackbar Snackbar

<ListTemplate PageTitle=@PageTitle Loading=@_loading Error=@_error ErrorMessage=@_errorMessage>

    <ButtonsAreaContent>
        <MudButton StartIcon="@AppIcons.Add" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" 
            Href="@($"/{RootUri}/{AddUri}")">Add @SingularContext</MudButton>
    </ButtonsAreaContent>

    <ListAreaContent>
        <MudTable Items="@_listOfItems" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
                    Class="ml-2 mr-2 mt-4">
            <ColGroup>
                <col />
                <col style="width: 120px;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh>Label</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Label">@context.Label</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Size="@Size.Small" Icon="@AppIcons.Edit" HRef="@($"/{RootUri}/{context.Id}/{EditUri}")" />
                    <MudIconButton Size="@Size.Small" Icon="@AppIcons.Delete" OnClick="@(async () => await DeleteItemAsync(context))" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </ListAreaContent>

</ListTemplate>


@code {
    [Parameter]
    public string PageTitle { get; set; } = string.Empty;

    [Parameter]
    public string RootUri { get; set; } = string.Empty;

    [Parameter]
    public string AddUri { get; set; } = string.Empty;

    [Parameter]
    public string EditUri { get; set; } = string.Empty;

    [Parameter]
    public string SingularContext { get; set; } = string.Empty;

    public TItem[] _listOfItems { get; set; } 
    private bool _loading = false;
    private bool _busy = false;
    private bool _error = false;
    private string _errorMessage = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        await GetItemsAsync();
    }

    private async Task GetItemsAsync()
    {
        try
        {
            _loading = true;
            _listOfItems = await CRUDService.GetAllAsync<TItem>();
            if (_listOfItems is null)
            {
                _error = true;
                _errorMessage = "Retrieval of the data failed";
            }
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task DeleteItemAsync(TItem itemToRemove)
    {
        if (_busy)
        {
            return;
        }

        try
        {
            _busy = true;

            bool res = await CRUDService.DeleteAsync<TItem>(itemToRemove);

            ResetErrorMessage();

            if (res )
            {
                Snackbar.Add($"{SingularContext} deleted successfully", Severity.Success);
                await GetItemsAsync();
            }
            else
            {
                Snackbar.Add($"Error when deleting the {SingularContext}", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }
}