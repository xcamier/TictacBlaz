@using tictacApp.Data
@using FluentValidation
@using tictacApp.Services
@using tictacApp.Helpers
@using tictacApp.ViewModels
@using tictacApp.Interfaces
@using AutoMapper

@inject NavigationManager Navigation
@inject IGenericCRUDService TagsService

@inject ItemSelectionService<ProjectView, TimeLogView> ProjectSelectionServiceV;
@inject ItemSelectionService<ObjectiveView, TimeLogView> ObjectiveSelectionServiceV;
@inject ItemSelectionService<CharacteristicView, TimeLogView> CharacteristicSelectionServiceV;

@inject IMapper Mapper

<MudForm Model="@TimeLog"
    @ref="@form" Validation="@(timeLogValidator.ValidateValue)" ValidationDelay="0">

    <MudGrid Justify="Justify.Center" Class="mt-2">
        <MudItem xs="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@Mode Time Log</MudText>
                    </CardHeaderContent>
                </MudCardHeader>

                @if (TimeLog is not null && _tags is not null)
                {
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="4">
                                <MudDatePicker Label="Date of the log" Placeholder="Select Date"
                                                Editable="true" DisableToolbar="true"
                                                @bind-Date="TimeLog.StartDate" For="@(() => TimeLog.StartDate)" />                                
                            </MudItem>
                            <MudItem xs="4">
                                <MudTimePicker Label="Time of the log" Placeholder="Select Time"
                                                Editable="true" DisableToolbar="true" Class = "ml-2"
                                                @bind-Time="TimeLog.TimeSpan" For="@(() => TimeLog.TimeSpan)" />                                
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField Label="Time spent" 
                                                Adornment="Adornment.End" AdornmentText="min"
                                                @bind-Value="TimeLog.TimeSpentInMin"  For="@(() => TimeLog.TimeSpentInMin)"
                                                Immediate="true"/>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField T="string" Label="Description" Variant="Variant.Text" Lines="3" 
                                                @bind-Value="TimeLog.Description" For="@(() => TimeLog.Description)" 
                                                Immediate="true"/>
                            </MudItem>
                        </MudGrid>

                        <MudGrid Class="mt-4">
                            <MudItem xs="12">
                                @if (TimeLog.ProjectId.HasValue)
                                {
                                    <MudChip Icon="@AppIcons.Project" 
                                                OnClick="SelectProject" OnClose="UnselectProject">
                                        @TimeLog.ProjectAsText
                                    </MudChip>
                                }
                                else
                                {
                                    <MudButton Variant="Variant.Text" StartIcon="@AppIcons.Project" 
                                                OnClick="SelectProject">
                                        Select Project...
                                    </MudButton>
                                }
                            </MudItem>
                            <MudItem xs="12">
                                @if (TimeLog.ObjectiveId.HasValue)
                                {
                                    <MudChip Icon="@AppIcons.Objective" 
                                                OnClick="SelectObjective" OnClose="UnselectObjective">
                                        @TimeLog.ObjectiveAsText
                                    </MudChip>
                                }
                                else
                                {
                                    <MudButton Variant="Variant.Text" StartIcon="@AppIcons.Project" 
                                                OnClick="SelectObjective">
                                        Select Objective...
                                    </MudButton>
                                }
                            </MudItem>
                            <MudItem xs="12">
                                <CharacteristicsSelector 
                                    TTypeOfCharacteristic=TimeLogView
                                    Entity=@TimeLog
                                    IsAdd=@IsAdd
                                    BackFromSelection=@BackFromSelection
                                    SelectionUri="/characteristicSelectorForTimelog"
                                    HasOpenSelector="@(async () => await HasOpenCharacteriticsSelector())"/>
                            </MudItem>
                            <MudItem xs="12">
                                <MudSelect Class="mt-4"  MultiSelection="true" 
                                            @bind-SelectedValues="_selectedTags" T="TagView" Text="@_valToDisplay" OnClose="OnCloseTag"
                                            Label="Tags" AdornmentIcon="@AppIcons.Label" AnchorOrigin="Origin.BottomCenter">
                                    @foreach (var tag in _tags)
                                    {
                                        <MudSelectItem Value="@tag">@tag.Label</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions Class="d-flex justify-space-between">                                
                        <MudButton Variant="Variant.Filled" Disabled="@Busy" 
                                    Color="Color.Primary" 
                                    OnClick="@(async () => await HandleSubmitAsync(true))">@Mode</MudButton>
                        
                        <MudButton Variant="Variant.Filled" Disabled="@Busy" 
                                    Color="Color.Primary" 
                                    OnClick="@(async () => await CancelAsync())">Cancel</MudButton>
                    </MudCardActions>
                }
            </MudCard>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public bool IsAdd { get; set; }

    [Parameter]
    public TimeLogView? TimeLog { get; set; }

    [Parameter]
    public bool BackFromSelection { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    private string Mode => IsAdd ? "Add" : "Edit";
    private MudForm form;
    private TimeLogModelFluentValidator timeLogValidator = new TimeLogModelFluentValidator();
    private TagView[]? _tags = null;
    //private Tag value { get; set; } //= "No tag selected";
    
    private IEnumerable<TagView> _selectedTags { get; set; } = new HashSet<TagView>();
    private string _valToDisplay = string.Empty;


    protected override async Task OnInitializedAsync()
    { 
        await GetTagsAsync();

        if (TimeLog is not null && TimeLog.StartDate.HasValue)
        {
            TimeLog.TimeSpan = TimeLog.StartDate.Value.TimeOfDay;

            HashSet<TagView> selectionHashSet = new HashSet<TagView>();
            foreach (TagView tag in TimeLog.Tags)
            {
                var tmp = _tags.Single(t => t.Id == tag.Id);
                selectionHashSet.Add(tmp);
            }
            _selectedTags = selectionHashSet;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        //Required to force the tags list to display the right string
        if (_selectedTags.Count() > 0 && firstRender)
        {
            OnCloseTag();            
            StateHasChanged();
        }
    }

    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    private async Task<Task> HandleSubmitAsync(bool isValid)
    {
        await form.Validate();
        if (form.IsValid)
        {
            int value = _selectedTags.Count();

            if (TimeLog.StartDate.HasValue)
            {
                TimeLog.StartDate = TimeLog.StartDate.Value.Date + TimeLog.TimeSpan;
            }

            AssignTags();

            return ValidationResult.InvokeAsync(true);
        }
 
        return ValidationResult.InvokeAsync(false);
    }

    private async Task GetTagsAsync()
    {
        Tag[] dbTags = await TagsService.GetAllAsync<Tag>();
        _tags = Mapper.Map<TagView[]>(dbTags);
    }
    
    private void SelectProject()
    {
        ProjectSelectionServiceV.EntityBackup = TimeLog;
        ProjectSelectionServiceV.IsAdd = IsAdd;

        Navigation.NavigateTo("/projectSelector");
    }

    private void UnselectProject()
    {
        //TimeLog.Project = null;
        TimeLog.ProjectId = null;
        //TimeLog.ProjectsAsText = string.Empty;
    }

    private void SelectObjective()
    {
        ObjectiveSelectionServiceV.EntityBackup = TimeLog;
        ObjectiveSelectionServiceV.IsAdd = IsAdd;
        
        Navigation.NavigateTo("/objectiveSelector");
    }

    private void UnselectObjective()
    {
        //TimeLog.Objective = null;
        TimeLog.ObjectiveId = null;
        //TimeLog.ObjectivesAsText = string.Empty;
    }

    private async Task HasOpenCharacteriticsSelector()
    {
        AssignTags();
    }

    private void AssignTags()
    {
        if (_selectedTags.Any())
        {
            var tagsToRemove = TimeLog.Tags.Where(tl => _selectedTags.All(st => st.Id != tl.Id));
            List<TagView> tags = new List<TagView>(tagsToRemove);   //prevents issues with the iterator

            var tagsToAdd = _selectedTags.Where(st => TimeLog.Tags.All(tl => tl.Id != st.Id));

            foreach(TagView tag in tags)
            {
                TimeLog.Tags.Remove(tag);
            }

            foreach (TagView tag in tagsToAdd)
            {
                TimeLog.Tags.Add(tag);
            }
        }
    }

    private void OnCloseTag()
    {
        _valToDisplay = $"Selected tag{(_selectedTags.Count() > 1 ? "s" : "")}: {string.Join(", ", _selectedTags.Select(x => x.Label))}";
    }

    //Local class for the fluent validator
    public class TimeLogModelFluentValidator : AbstractValidator<TimeLogView>
    {
        public TimeLogModelFluentValidator()
        {
            DateTime now = DateTime.Now;
            RuleFor(timeLog => timeLog.StartDate).
                            NotNull().
                            GreaterThan(new DateTime(now.Year - 1, now.Month, now.Day, 0, 0, 0));

            RuleFor(timeLog =>timeLog.TimeSpentInMin).GreaterThan(0);
		}

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<TimeLogView>.CreateWithOptions((TimeLogView)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}