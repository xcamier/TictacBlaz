@using FluentValidation
@using tictacApp.Services
@using tictacApp.Helpers
@using tictacApp.ViewModels
@using tictacApp.Interfaces
@using AutoMapper

@inject NavigationManager Navigation
@inject IGenericCRUDService TagsService

@inject ItemSelectionService<PlannedActivityView, TimeLogView> ActivitySelectionService
@inject ItemSelectionService<CharacteristicView, TimeLogView> CharacteristicSelectionService

@inject IMapper Mapper

<AddEditTemplate 
    PageTitle=@_pageTitle
    Error=@Error
    ErrorMessage=@ErrorMessage
    Busy=@Busy 
    Mode=@_mode
    CancelRequest="CancelAsync"
    ValidationRequest="ValidationRequestAsync">

    <AddEditContent>
        @if (TimeLog is not null && _tags is not null)
        {
            <MudCardContent>
                <MudForm Model="@TimeLog"
                    @ref="@_form" Validation="@(_timeLogValidator.ValidateValue)" ValidationDelay="0">

                    <MudGrid>
                        <MudItem xs="4">
                            <MudDatePicker Label="Date of the log" Placeholder="Select Date"
                                            Editable="true" DisableToolbar="true"
                                            Date="TimeLog.StartDate" DateChanged="DateChanged"
                                            For="@(() => TimeLog.StartDate)" />                                
                        </MudItem>
                        <MudItem xs="4">
                            <MudTimePicker Label="Time of the log" Placeholder="Select Time"
                                            Editable="true" DisableToolbar="true" Class = "ml-2"
                                            Time="@TimeLog.TimeSpan" TimeChanged="TimeChanged"
                                            For="@(() => TimeLog.TimeSpan)" />                                
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Time spent" 
                                            Adornment="Adornment.End" AdornmentText="min"
                                            @bind-Value="TimeLog.TimeSpentInMin"  For="@(() => TimeLog.TimeSpentInMin)"
                                            Immediate="true"/>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField T="string" Label="Description" Variant="Variant.Text" Lines="3" 
                                            @bind-Value="TimeLog.Description" For="@(() => TimeLog.Description)" 
                                            Immediate="true"/>
                        </MudItem>
                    </MudGrid>

                    <MudGrid Class="mt-4">
                        <MudItem xs="12">
                            @if (TimeLog.ProjectId.HasValue)
                            {
                                <MudChip Icon="@AppIcons.Project" 
                                            OnClick="SelectProject" OnClose="UnselectProject">
                                    @TimeLog.ProjectAsText
                                </MudChip>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Text" StartIcon="@AppIcons.Project" 
                                            OnClick="SelectProject">
                                    Select Project...
                                </MudButton>
                            }
                        </MudItem>
                        <MudItem xs="12">
                            @if (TimeLog.ObjectiveId.HasValue)
                            {
                                <MudChip Icon="@AppIcons.Objective" 
                                            OnClick="SelectObjective" OnClose="UnselectObjective">
                                    @TimeLog.ObjectiveAsText
                                </MudChip>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Text" StartIcon="@AppIcons.Project" 
                                            OnClick="SelectObjective">
                                    Select Objective...
                                </MudButton>
                            }
                        </MudItem>
                        <MudItem xs="12">
                            <CharacteristicsSelector 
                                TTypeOfCharacteristic=TimeLogView
                                Entity=@TimeLog
                                IsAdd=@IsAdd
                                BackFromSelection=@BackFromSelection
                                SelectionUri="/characteristicSelectorForTimelog"
                                HasOpenSelector="@(async () => await HasOpenCharacteriticsSelector())"/>
                        </MudItem>
                        <MudItem xs="12">
                            <MudSelect Class="mt-4"  MultiSelection="true" 
                                        @bind-SelectedValues="_selectedTags" T="TagView" Text="@_valToDisplay" OnClose="OnCloseTag"
                                        Label="Tags" AdornmentIcon="@AppIcons.Label" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var tag in _tags)
                                {
                                    <MudSelectItem Value="@tag">@tag.Label</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudCardContent>
        }
    </AddEditContent>

</AddEditTemplate>


@code {
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public bool IsAdd { get; set; }

    [Parameter]
    public TimeLogView? TimeLog { get; set; }

    [Parameter]
    public bool BackFromSelection { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    [Parameter]
    public bool Error { get; set; }

    [Parameter]
    public string ErrorMessage { get; set; }

    private string _mode => IsAdd ? "Add" : "Edit";
    private MudForm _form;
    private TimeLogModelFluentValidator _timeLogValidator = new TimeLogModelFluentValidator();
    private string _pageTitle = string.Empty;

    private TagView[]? _tags = null;
    private IEnumerable<TagView> _selectedTags { get; set; } = new HashSet<TagView>();
    private string _valToDisplay = string.Empty;


    protected override async Task OnInitializedAsync()
    { 
        _pageTitle = $"{_mode} Time Log";

        _tags = await DefaultDataRetriversHelper.GetTagsAsync(TagsService, Mapper);

        if (TimeLog is not null && TimeLog.StartDate.HasValue)
        {
            TimeLog.TimeSpan = TimeLog.StartDate.Value.TimeOfDay;

            HashSet<TagView> selectionHashSet = new HashSet<TagView>();
            foreach (TagView tag in TimeLog.Tags)
            {
                var tmp = _tags.Single(t => t.Id == tag.Id);
                selectionHashSet.Add(tmp);
            }
            _selectedTags = selectionHashSet;
        }

        await base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        //Required to force the tags list to display the right string
        if (_selectedTags.Count() > 0 && firstRender)
        {
            OnCloseTag();            
            StateHasChanged();
        }
    }

    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    private Task ValidationRequestAsync()
    {
         _form.Validate();
        if (_form.IsValid)
        {
            AssignTags();

            return ValidationResult.InvokeAsync(true);
        }
 
        return ValidationResult.InvokeAsync(false);
    }
    
    private void SelectProject()
    {
        ActivitySelectionService.EntityBackup = TimeLog;
        ActivitySelectionService.IsAdd = IsAdd;

        Navigation.NavigateTo("/projectSelector");
    }

    private void UnselectProject()
    {
        TimeLog.ProjectId = null;
    }

    private void SelectObjective()
    {
        ActivitySelectionService.EntityBackup = TimeLog;
        ActivitySelectionService.IsAdd = IsAdd;
        
        Navigation.NavigateTo("/objectiveSelector");
    }

    private void UnselectObjective()
    {
        TimeLog.ObjectiveId = null;
    }

    private async Task HasOpenCharacteriticsSelector()
    {
        AssignTags();
    }

    private void AssignTags()
    {
        if (_selectedTags.Any())
        {
            var tagsToRemove = TimeLog.Tags.Where(tl => _selectedTags.All(st => st.Id != tl.Id));
            List<TagView> tags = new List<TagView>(tagsToRemove);   //prevents issues with the iterator

            var tagsToAdd = _selectedTags.Where(st => TimeLog.Tags.All(tl => tl.Id != st.Id));

            foreach(TagView tag in tags)
            {
                TimeLog.Tags.Remove(tag);
            }

            foreach (TagView tag in tagsToAdd)
            {
                TimeLog.Tags.Add(tag);
            }
        }
    }

    private void OnCloseTag()
    {
        _valToDisplay = FormattersHelper.GetListOfTagsAsString(_selectedTags);
    }

    private void TimeChanged(TimeSpan? newTime)
    {
        if (TimeLog is not null)
        {
            TimeLog.TimeSpan = newTime;

            MergeStartDateAndTimeSpan();
        }
    }

    private void DateChanged(DateTime? newDate)
    {
        if (TimeLog is not null)
        {
            TimeLog.StartDate = newDate;

            MergeStartDateAndTimeSpan();
        }
    }

    private void MergeStartDateAndTimeSpan()
    {
        if (TimeLog is not null && TimeLog.TimeSpan.HasValue && TimeLog.StartDate.HasValue)
        {
            TimeLog.StartDate = TimeLog.StartDate.Value.Date + TimeLog.TimeSpan;
        }
    }

    //Local class for the fluent validator
    public class TimeLogModelFluentValidator : AbstractValidator<TimeLogView>
    {
        public TimeLogModelFluentValidator()
        {
            DateTime now = DateTime.Now;
            RuleFor(timeLog => timeLog.StartDate).
                            NotNull().WithMessage("Please specify a date for the timelog").
                            GreaterThan(new DateTime(now.Year - 1, now.Month, now.Day, 0, 0, 0));

            RuleFor(timeLog => timeLog.TimeSpan).
                            NotNull().WithMessage("Please specify a time for the timelog");

            RuleFor(timeLog =>timeLog.TimeSpentInMin).GreaterThan(0);
		}

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<TimeLogView>.CreateWithOptions((TimeLogView)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}