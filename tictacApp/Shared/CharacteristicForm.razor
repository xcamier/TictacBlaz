@using tictacApp.Data
@using FluentValidation
@using tictacApp.Helpers
@using tictacApp.Services

@inject GradesService GradesService
@inject CharacteristicsGroupsService CharacteristicsGroupsService
@inject CharacteristicsService CharacteristicsService

<MudForm Model="@Characteristic"
    @ref="@form" Validation="@(characteristicValidator.ValidateValue)" ValidationDelay="0">

    <MudGrid Justify="Justify.Center" Class="mt-2">
        <MudItem xs="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@Mode Characteristic</MudText>
                    </CardHeaderContent>
                </MudCardHeader>

                @if (Characteristic is not null && _grades is not null && _groups is not null)
                {
                    <MudCardContent>  
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTextField T="string" Label="Primary Description" Variant="Variant.Text" Lines="3" 
                                                @bind-Value="Characteristic.Description1" For="@(() => Characteristic.Description1)" 
                                                Immediate="true"/>
                            </MudItem>

                            @if (!_hasTwoLevelsOfParents)
                            {
                                <MudItem xs="12">
                                    <MudTextField T="string" Label="Secondary Description" Variant="Variant.Text" Lines="3" 
                                                    @bind-Value="Characteristic.Description2" For="@(() => Characteristic.Description2)" 
                                                    Immediate="true"/>
                                </MudItem>
                            }

                            @if (Characteristic.ParentCharacteristicId is null)
                            {
                                <MudItem xs="12">
                                    <MudSelect Label="Select a grade" HelperText="Grade"
                                                    @bind-Value="Characteristic.GradeId" For="@(() => Characteristic.GradeId)">
                                        @foreach (Grade grade in _grades)
                                        {
                                            <MudSelectItem Value="@ConvertIntToNullableInt(@grade.Id)">@grade.Label</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                            }

                            @if (_hasTwoLevelsOfParents)
                            {
                                <MudItem xs="12">
                                    <MudSelect Label="Select group" HelperText="Group"
                                                    @bind-Value="Characteristic.CharacteristicsGroupId" For="@(() => Characteristic.CharacteristicsGroupId)">
                                        @foreach (CharacteristicsGroup group in _groups)
                                        {
                                            <MudSelectItem Value="@ConvertIntToNullableInt(group.Id)">@group.Label</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>                                
                            }

                            @if (Characteristic.ParentCharacteristicId is null)
                            {
                                <MudItem xs="6">
                                    <MudTextField T="string" Label="Color" InputType="InputType.Color" 
                                                    @bind-Value="Characteristic.Color" For="@(() => Characteristic.Color)" 
                                                    Immediate="true"/>
                                </MudItem>
                            }

                            <MudItem xs="12" Class="mt-4">
                                <MudSwitch Class="mt-4" Label="Closed" Color="Color.Info" 
                                            @bind-Checked="@Characteristic.IsClosed" For="@(() => Characteristic.IsClosed)"/>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions Class="d-flex justify-space-between">                                
                        <MudButton Variant="Variant.Filled" Disabled="@Busy" 
                                    Color="Color.Primary" 
                                    OnClick="@(async () => await HandleSubmitAsync(true))">@Mode</MudButton>
                        
                        <MudButton Variant="Variant.Filled" Disabled="@Busy" 
                                    Color="Color.Primary" 
                                    OnClick="@(async () => await CancelAsync())">Cancel</MudButton>
                    </MudCardActions>
                }
            </MudCard>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public bool IsAdd { get; set; }

    [Parameter]
    public Characteristic? Characteristic { get; set; }

    [Parameter]
    public Characteristic? DbCharacteristic { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    private string Mode => IsAdd ? "Add" : "Edit";
    private MudForm form;
    private CharacteristicModelFluentValidator characteristicValidator = new CharacteristicModelFluentValidator();

    private bool _hasTwoLevelsOfParents = false;

    private Grade[]? _grades;
    private CharacteristicsGroup[]? _groups;


    protected override async Task OnInitializedAsync()
    {
        _hasTwoLevelsOfParents = await CharacteristicsService.HasTwoLevelsOfParents(Characteristic.ParentCharacteristicId);
        //Characteristic.GradeId = 0;
        _grades = await GradesService.GetGradesAsync();
        _groups = await CharacteristicsGroupsService.GetCharacteristicsGroupsAsync();
    }

    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    private async Task<Task> HandleSubmitAsync(bool isValid)
    {
        await form.Validate();
        if (form.IsValid)
        {
            return ValidationResult.InvokeAsync(true);
        }

        return ValidationResult.InvokeAsync(false);
    }

    private int? ConvertIntToNullableInt(int value)
    {
        int? res = value;
        return res;
    }

    //Local class for the fluent validator
    public class CharacteristicModelFluentValidator : AbstractValidator<Characteristic>
    {
        public CharacteristicModelFluentValidator()
        {
            RuleFor(c => c.Description1).
                            NotNull().
                            MaximumLength(Constants.DescriptionStandardLength).
                            MinimumLength(Constants.LabelMinLength);

            RuleFor(c => c.Description2).
                            MaximumLength(Constants.DescriptionStandardLength);
		}

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Characteristic>.CreateWithOptions((Characteristic)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}