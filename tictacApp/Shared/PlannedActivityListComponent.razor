@typeparam TPlannedActivity where TPlannedActivity: PlannedActivity

@using tictacApp.Services
@using tictacApp.Interfaces
@using tictacApp.Data
@using tictacApp.Helpers
@using tictacApp.ViewModels
@using AutoMapper

@inject IPlannedActivityCRUDService PlannedActivitiesService
@inject TimeLogsService TimeLogsService
@inject ISettingsService SettingsService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IMapper Mapper

@inject ItemSelectionService<PlannedActivityView, TimeLogView> ItemSelectionService

<ListTemplate PageTitle="@_pageTitle" Loading="@_loading" Error="@_error" ErrorMessage="@_errorMessage" ShowFilterArea="@(!_displayAsGantt)">

    <BreadcrumbContent>
        <MudBreadcrumbs Items="_path">
            <ItemTemplate Context="item">
                <MudButton Variant="Variant.Text" StartIcon="@item.Icon" Size="Size.Small" OnClick="@(() => GoToSubActivity(@item.Href))">@item.Text</MudButton>
            </ItemTemplate>
        </MudBreadcrumbs>
    </BreadcrumbContent>

    <ButtonsAreaContent>
        @if (IsInSelection)
        {
            <MudButton StartIcon="@AppIcons.Add" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" 
                        OnClick="OnCancel">Cancel</MudButton>
        }
        else
        {
            <MudGrid>
                <MudItem xs="2">
                    <MudButton StartIcon="@AppIcons.Add" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" 
                            OnClick="@(() => AddActivity(ParentActivityId))" Class="d-inline-flex">Add @Context</MudButton>
                </MudItem>
                @if (Context == "Objectives")
                {
                    <MudItem xs="4">
                        <MudCheckBox T="bool" Checked="@_displayAsGantt" CheckedChanged="@(async (e) => await DisplayAsGanttChange(this, e))" 
                                                Label="Display as Gantt"></MudCheckBox>
                    </MudItem>
                }
            </MudGrid>     
        }
    </ButtonsAreaContent>


    <FiltersAreaContent>
        <MudSwitch T="bool" Color="Color.Primary" Label="Closed Only"
                    Checked="@_displayClosedOnly" CheckedChanged="@(async (e) => await DisplayClosedChanged(this, e))"  />
    </FiltersAreaContent>

    <ListAreaContent>

        @if (_displayAsGantt)
        {
            <ObjectivesAsGanttComponent
                PlannedActivities=@_allPlannedActivities>
            </ObjectivesAsGanttComponent>
        }
        else
        {
            <PlannedActivityListOnlyComponent 
                PlannedActivities=@_plannedActivities
                PlannedActivitiesWithChildren=@_activitiesWithChildren
                ActivitiesSettings=@_activitiesSettings
                Loading=@_loading
                IsInSelection=@IsInSelection
                Context=@Context
                SelectEventAsync="@((selected) => Select(selected))"
                GoToSubActivityEventAsync="@((id) => GoToSubActivity(id))"
                EditPlannedActivityEventAsync="@((activityToEdit) => EditActivity(activityToEdit))"
                DeletePlannedActivityEventAsync="@(async (activityToDelete) => await DeletePlannedActivityAsync(activityToDelete))">
            </PlannedActivityListOnlyComponent>
        }
        <DeleteBoxComponent AdditionalWarning="@_additionalDeletionWarnings" @ref="_mbox" />
    </ListAreaContent>

</ListTemplate>


@code {
    [Inject] private IDialogService DialogService { get; set; }

    [Parameter]
    public int? ParentActivityId { get; set; } = null;

    [Parameter]
    public bool IsInSelection { get; set; } = false;

    [Parameter]
    public string Context { get; set; } = string.Empty;

    [Parameter]
    public string RootUri { get; set; } = string.Empty;

    [Parameter]
    public string AddUri { get; set; }

    [Parameter]
    public string EditUri { get; set; }

    [Parameter]
    public string BackToLogWhenAdding { get; set; }

    [Parameter]
    public string BackToLogWhenEditing { get; set; }

    private bool _displayClosedOnly = false;
    private List<BreadcrumbItem> _path = new List<BreadcrumbItem>();
    private PlannedActivityView[]? _plannedActivities;
    private PlannedActivityView[]? _allPlannedActivities;
    private TPlannedActivity[]? _dbPlannedActivities;
    private bool _loading = false;
    private bool _busy = false;
    private bool _error = false;
    private string _errorMessage = string.Empty;
    private string _pageTitle = string.Empty;

    private PlannedActivitySettingsView _activitiesSettings;
    private IEnumerable<int> _activitiesWithChildren = new List<int>();

    private DeleteBoxComponent _mbox;

    private bool _displayAsGantt = false;

    private string _additionalDeletionWarnings = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _pageTitle = IsInSelection ? $"{Context} Selection" : Context;

        await BuildBreadcrumb();
        await GetSettings();
        await GetPlannedActivitiesAsync();
        await GetPlannedActivitiesChildrenInfo();
    }

    private async Task BuildBreadcrumb()
    {
        KeyValuePair<int, string?>[] parentActivities = 
                            await PlannedActivitiesService.GetParentsAsync<TPlannedActivity>(ParentActivityId);
        _path = BreadcrumbHelper.BuildBreadcrumb(Context, RootUri, parentActivities);

    }

    private async Task GetSettings()
    {
        Setting[] settings = await SettingsService.GetAllAsync();
        _activitiesSettings = SettingsService.MapPlannedActivitySettingsToView(settings);
    }

    private async Task GetPlannedActivitiesAsync()
    {
        try
        {
            _loading = true;
            _dbPlannedActivities = await PlannedActivitiesService.GetAllAsync<TPlannedActivity>(ParentActivityId, _displayClosedOnly);
            _plannedActivities = Mapper.Map<PlannedActivityView[]>(_dbPlannedActivities);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task GetAllPlannedActivitiesAsync()
    {
        try
        {
            _loading = true;
            TPlannedActivity[] dbPlannedActivities = await PlannedActivitiesService.GetAllNotClosedAsync<TPlannedActivity>();
            _allPlannedActivities = Mapper.Map<PlannedActivityView[]>(dbPlannedActivities);
        }
        finally
        {
            _loading = false;
        }
    }

    private void EditActivity(PlannedActivityView activityToEdit)
    {
        string uri =$"/{RootUri}/{activityToEdit.Id}/{EditUri}";
        Navigation.NavigateTo(uri);
    }

    private async Task DeletePlannedActivityAsync(PlannedActivityView activityToRemove)
    {
        if (_busy)
            return;

        try
        {
            //Checks the dependencies. We don't want to delete if there are subitems: in that case delete manually
            //then we check the timelogs that are associated
            bool shallStopDeletion = await CheckIfActivityHasSubItems(activityToRemove.Id);
            if (shallStopDeletion) return;
            
            int nbOfAssociatedTimelogs = await CheckTimelogsDependencies(activityToRemove.Id);            
            if (nbOfAssociatedTimelogs > 0)
            {
                _additionalDeletionWarnings = $"Warning: {nbOfAssociatedTimelogs} timelogs are attached to that activity. The link will be deleted but the timelogs won't be removed.";
            }

            bool? hasConfirmedDeletion = await _mbox.ShowAsync();
            StateHasChanged();
            if (hasConfirmedDeletion == null) return;

            _busy = true;

            TPlannedActivity? dbActivityToRemove = _dbPlannedActivities?.FirstOrDefault(pa => pa.Id == activityToRemove.Id);

            bool res = false;
            if (dbActivityToRemove is not null)
            {
                var dbContext = PlannedActivitiesService.GetNewDBContext();
                await PlannedActivitiesService.DeleteAsync<TPlannedActivity>(dbContext, dbActivityToRemove);

                res = await dbContext.SaveChangesAsync() > 0;
            }

            ResetErrorMessage();

            if (res )
            {
                Snackbar.Add("Deletion successful", Severity.Success);
                await GetPlannedActivitiesAsync();
            }
            else
            {
                Snackbar.Add("Error when deleting", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    private async Task<int> CheckTimelogsDependencies(int activityToRemoveId)
    {
        if (Context == "Objectives")
        {
            return  await TimeLogsService.CountLogsForObjective(activityToRemoveId);
        }
        else if (Context == "Projects")
        {
            return await TimeLogsService.CountLogsForProject(activityToRemoveId);
        }
        else
            throw new NotImplementedException($"The context should have been Projects or Objectives, {Context} context was provided.");
    }

    private async Task<bool> CheckIfActivityHasSubItems(int activityToRemoveId)
    {
        bool hasFoundOne = await PlannedActivitiesService.HasSubActivities<TPlannedActivity>(activityToRemoveId);

        if (hasFoundOne)
        {
            await DialogService.ShowMessageBox("Warning", 
                                                "Deleting is not possible because there are sub activities. Please delete them manually.");
            StateHasChanged();
        }

        return hasFoundOne;
    }

    private async Task DisplayAsGanttChange(object sender, bool newValue)
    {
        _displayAsGantt = newValue;
        await GetAllPlannedActivitiesAsync();
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }

    private void GoToSubActivity(int subActivityId)
    {
        GoToSubActivity($"/{RootUri}/{subActivityId}");
    }

    private void GoToSubActivity(string url)
    {
        Navigation.NavigateTo(url, true);
    }

    private void AddActivity(int? parentActivityId)
    {
        string url = string.Empty;
        if (parentActivityId.HasValue)
        {
            url = $"/{RootUri}/{parentActivityId}/{AddUri}";
        }
        else
        {
            url = $"/{RootUri}/{AddUri}";
        }
        Navigation.NavigateTo(url);
    }

    private void Select(PlannedActivityView selectedActivity)
    {
        ItemSelectionService.HasSelected = true;
        ItemSelectionService.Selection.Add(selectedActivity);

        NavigateBackToCaller();
    }

    private void OnCancel()
    {
        ItemSelectionService.HasSelected = false;

        NavigateBackToCaller();     
    }

    private void NavigateBackToCaller()
    {
        string url = ItemSelectionService.IsAdd ? 
                        $"/logs/{BackToLogWhenAdding}" : 
                        $"/logs/{ItemSelectionService.EntityBackup.Id}/{BackToLogWhenEditing}";
        Navigation.NavigateTo(url);
    }

    private async Task GetPlannedActivitiesChildrenInfo()
    {
        if (_plannedActivities is not null)
        {
            IEnumerable<int> plannedActivitiesIds = _plannedActivities.Select(pa => pa.Id);
            _activitiesWithChildren = 
                                await PlannedActivitiesService.GetIdOfPlannedActivitiesWithChildren<TPlannedActivity>(plannedActivitiesIds.ToArray());
        }
    }

    private async Task DisplayClosedChanged(object Sender, bool newValue)
    {
        _displayClosedOnly = newValue;
        await GetPlannedActivitiesAsync();
    }
}