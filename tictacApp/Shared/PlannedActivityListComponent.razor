@typeparam TPlannedActivity where TPlannedActivity: PlannedActivity

@using tictacApp.Services
@using tictacApp.Interfaces
@using tictacApp.Data
@using tictacApp.Helpers
@using tictacApp.ViewModels

@using AutoMapper

@inject IGenericCRUDServiceWithParents PlannedActivitiesService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

@inject IMapper Mapper

@inject ItemSelectionService<PlannedActivityView, TimeLogView> ItemSelectionService

<ListTemplate PageTitle=@_pageTitle Loading=@_loading Error=@_error ErrorMessage=@_errorMessage>

    <BreadcrumbContent>
        <MudBreadcrumbs Items="_path">
            <ItemTemplate Context="item">
                <MudButton Variant="Variant.Text" StartIcon="@item.Icon" Size="Size.Small" OnClick="@(() => GoToSubActivity(@item.Href))">@item.Text</MudButton>
            </ItemTemplate>
        </MudBreadcrumbs>
    </BreadcrumbContent>

    <ButtonsAreaContent>
        @if (IsInSelection)
        {
            <MudButton StartIcon="@AppIcons.Add" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" 
                        OnClick="OnCancel">Cancel</MudButton>
        }
        else
        {
            <MudButton StartIcon="@AppIcons.Add" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" 
                    OnClick="@(() => AddActivity(ParentActivityId))" Class="d-inline-flex">Add @Context</MudButton>
        }
    </ButtonsAreaContent>

    <ListAreaContent>
        <MudTable Items="@_plannedActivities" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
                    Class="ml-2 mr-2 mt-4">
            <ColGroup>
                <col />
                <col />
                <col />
                <col style="width: 120px;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh>Label</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Target</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Label">@context.Label</MudTd>
                <MudTd DataLabel="Label">@context.Description</MudTd>
                <MudTd DataLabel="Label">@context.TargetDate?.ToString("d")</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Size="@Size.Small" Icon="@AppIcons.View" OnClick="@(() => GoToSubActivity(context.Id))" />
                    @if (IsInSelection)
                    {
                        <MudIconButton Size="@Size.Small" Icon="@AppIcons.Select" OnClick="@(() => @Select(context))" />
                    }
                    else
                    {
                        <MudIconButton Size="@Size.Small" Icon="@AppIcons.Edit" HRef="@($"/{RootUri}/{context.Id}/{EditUri}")" />
                        <MudIconButton Size="@Size.Small" Icon="@AppIcons.Delete" OnClick="@(async () => await DeletePlannedActivityAsync(context))" />
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    </ListAreaContent>

</ListTemplate>


@code {
    [Parameter]
    public int? ParentActivityId { get; set; } = null;

    [Parameter]
    public bool IsInSelection { get; set; } = false;

    [Parameter]
    public string Context { get; set; } = string.Empty;

    [Parameter]
    public string RootUri { get; set; } = string.Empty;

    [Parameter]
    public string AddUri { get; set; }

    [Parameter]
    public string EditUri { get; set; }

    [Parameter]
    public string BackToLogWhenAdding { get; set; }

    [Parameter]
    public string BackToLogWhenEditing { get; set; }

    private List<BreadcrumbItem> _path = new List<BreadcrumbItem>();
    private TPlannedActivity[]? _plannedActivities;
    private bool _loading = false;
    private bool _busy = false;
    private bool _error = false;
    private string _errorMessage = string.Empty;
    private string _pageTitle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _pageTitle = IsInSelection ? $"{Context} Selection" : Context;

        await BuildBreadcrumb();
        await GetObjectivesAsync();
    }

    private async Task BuildBreadcrumb()
    {
        KeyValuePair<int, string?>[] parentActivities = 
                            await PlannedActivitiesService.GetParentsAsync<TPlannedActivity>(ParentActivityId);
        _path = BreadcrumbHelper.BuildBreadcrumb(Context, RootUri, parentActivities);

    }

    private async Task GetObjectivesAsync()
    {
        try
        {
            _loading = true;
            _plannedActivities = await PlannedActivitiesService.GetAllAsync<TPlannedActivity>(ParentActivityId);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task DeletePlannedActivityAsync(TPlannedActivity activityToRemove)
    {
        if (_busy)
        {
            return;
        }

        try
        {
            _busy = true;

            bool res = await PlannedActivitiesService.DeleteAsync<TPlannedActivity>(activityToRemove);

            ResetErrorMessage();

            if (res )
            {
                Snackbar.Add("Deletion successful", Severity.Success);
                await GetObjectivesAsync();
            }
            else
            {
                Snackbar.Add("Error when deleting", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }

    private void GoToSubActivity(int subActivityId)
    {
        GoToSubActivity($"/{RootUri}/{subActivityId}");
    }

    private void GoToSubActivity(string url)
    {
        Navigation.NavigateTo(url, true);
    }

    private void AddActivity(int? parentActivityId)
    {
        string url = string.Empty;
        if (parentActivityId.HasValue)
        {
            url = $"/{RootUri}/{parentActivityId}/{AddUri}";
        }
        else
        {
            url = $"/{RootUri}/{AddUri}";
        }
        Navigation.NavigateTo(url);
    }

    private void Select(TPlannedActivity selectedActivity)
    {
        ItemSelectionService.HasSelected = true;

        PlannedActivityView selectedObjectiveView = Mapper.Map<PlannedActivityView>(selectedActivity);
        ItemSelectionService.Selection.Add(selectedObjectiveView);

        NavigateBackToCaller();
    }

    private void OnCancel()
    {
        ItemSelectionService.HasSelected = false;

        NavigateBackToCaller();     
    }

    private void NavigateBackToCaller()
    {
        string url = ItemSelectionService.IsAdd ? 
                        $"/logs/{BackToLogWhenAdding}" : 
                        $"/logs/{ItemSelectionService.EntityBackup.Id}/{BackToLogWhenEditing}";
        Navigation.NavigateTo(url);
    }
}