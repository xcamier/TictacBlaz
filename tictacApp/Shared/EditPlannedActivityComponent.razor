@typeparam TPlannedActivity where TPlannedActivity: PlannedActivity, new()

@using Microsoft.EntityFrameworkCore
@using AutoMapper

@using tictacApp.ViewModels
@using tictacApp.Data
@using tictacApp.DataAccess
@using tictacApp.Interfaces

@inject NavigationManager Navigation
@inject IPlannedActivityCRUDService CRUDService
@inject ISnackbar Snackbar
@inject IMapper Mapper


@if (_plannedActivity is not null)
{
    <PlannedActivityForm 
                Busy=@_busy 
                TPlannedActivity=TPlannedActivity
                PlannedActivity=@_plannedActivity
                IsAdd=false
                Context=@Context
                Error=@_error
                ErrorMessage=@_errorMessage
                CancelRequest="Cancel"
                ValidationResult="@(async (success) => await ValidationResultAsync(success))"
                AddComment="@(async (comment) => await AddCommentAsync(comment))"
                EditComment="@(async (comment) => await EditCommentAsync(comment))"
                DeleteComment="@(async (comment) => await DeleteCommentAsync(comment))" />
}

@code {
    [Parameter]
    public int PlannedActivityId { get; set; }

    [Parameter]
    public string Context { get; set; }

    [Parameter]
    public string RootUri { get; set; }

    private TPlannedActivity? _plannedActivity = new TPlannedActivity();

    private TictacDBContext? _dbContext;
    private bool _busy;
    private bool _error;
    private string _errorMessage = string.Empty;
    private bool _concurrencyError = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            _busy = true;
            ResetErrorMessage();

            //persists until the component is destroyed as we have to keep the connection until we save or dismiss
            _dbContext  = CRUDService.GetNewDBContext(); 
            await GetPlannedActivityAsync();
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }

        await base.OnInitializedAsync();
    }

    private async Task GetPlannedActivityAsync()
    {
        try
        {
            _busy = true;
            ResetErrorMessage();

            TPlannedActivity? plannedActivity = await CRUDService.FindFromIdAsync<TPlannedActivity>(_dbContext, PlannedActivityId);
            if (plannedActivity != null)
            {
                _plannedActivity = plannedActivity;
            }
            else
            {
                _error = true;
                _errorMessage = $"Unable to find the {Context} with id: {PlannedActivityId}";
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    private async Task ValidationResultAsync(bool success)
    {
        await ValidationResultAsync(success, false);
    }

    private async Task ValidationResultAsync(bool success, bool stayOnThePage)
    {
        if (_busy)
        {
            return;
        }

        if (!success)
        {
            Snackbar.Add($"Unable to modify the {Context}", Severity.Warning);

            _concurrencyError = false;
            ResetErrorMessage();
            return;
        }

        try
        {
            _busy = true; 
            ResetErrorMessage();

            bool savingRes = false;
            if (_dbContext is not null)
            {
                savingRes = await _dbContext.SaveChangesAsync() > 0;
            }

            if (savingRes )
            {
                Snackbar.Add($"{Context} modified successfully", Severity.Success);
                if (!stayOnThePage)
                {
                    GoBackToList();
                }
            }
            else
            {
                Snackbar.Add($"Error when modifying the {Context}", Severity.Warning);
            }
        }
        catch (DbUpdateConcurrencyException dbex)
        {
            // concurrency issues!
            _concurrencyError = true;

            // get values from database
            var dbValues = dbex.Entries[0].GetDatabaseValues();

            if (dbValues is null)
            {
                // deleted - show contact not found
                Snackbar.Add($"The {Context} could not be updated and is not found in DB. It was probably deleted before you saved.", Severity.Warning);
                GoBackToList();
                return;
            }

            // bind to show labels on form
            _plannedActivity = (TPlannedActivity)dbValues.ToObject();

            // move to original so second submit works (unless there is another concurrent edit)
            dbex.Entries[0].OriginalValues.SetValues(dbValues);
            ResetErrorMessage();
            _busy = false;
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }


    //Do the work in DB and refresh
    private async Task AddCommentAsync(CommentView comment)
    {
        if (!_busy)
        {
            var newDbComment = Mapper.Map<Comment>(comment);
            _plannedActivity.Comments.Add(newDbComment);
            await ValidationResultAsync(true, true);
            await GetPlannedActivityAsync();
        }
    }

    //Do the work in DB and refresh
    private async Task EditCommentAsync(CommentView comment)
    {
        if (_busy)
            return;

        try
        {
            Comment? commentToUpdate = await CRUDService.FindCommentFromIdAsync(_dbContext, comment.Id);
            
            bool res = false;
            string msg = string.Empty;
            if (commentToUpdate is not null)
            {
                //res = await CRUDService.DeleteCommentAsync(_dbContext, commentToUpdate);
                Mapper.Map<CommentView, Comment>(comment, commentToUpdate);
                await ValidationResultAsync(true, true);
            }
            else
            {
                Snackbar.Add("Could not find the comment to update.", MudBlazor.Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
    }

    //Do the work in DB and refresh
    private async Task DeleteCommentAsync(CommentView comment)
    {
        if (_busy)
            return;

        try
        {
            _busy = true;

            Comment? commentToRemove = await CRUDService.FindCommentFromIdAsync(_dbContext, comment.Id);
            
            bool res = false;
            string msg = string.Empty;
            if (commentToRemove is not null)
            {
                res = await CRUDService.DeleteCommentAsync(_dbContext, commentToRemove);
                if (!res)
                {
                    msg = "Could not delete the comment.";
                }
            }
            else
            {
                msg = "Could not find the comment.";
            }

            ResetErrorMessage();

            if (res )
            {
                Snackbar.Add("Comment deleted successfully", Severity.Success);
                await GetPlannedActivityAsync();
            }
            else
            {
                Snackbar.Add($"Error when deleting the comment: {msg}", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    // Back to list.
    private void Cancel()
    {
        GoBackToList();
    }

    private void GoBackToList()
    {
        string url = string.Empty;
        if (_plannedActivity.ParentId.HasValue)
        {
            url = $"/{RootUri}/{_plannedActivity.ParentId}";
        }
        else
        {
            url = $"/{RootUri}";
        }
        Navigation.NavigateTo(url);
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }

    public void Dispose()
    {
        _dbContext?.Dispose();
    }
}