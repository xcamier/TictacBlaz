@page "/activitiesfollowup"

@using tictacApp.Data
@using tictacApp.Interfaces
@using tictacApp.ViewModels
@using tictacApp.Helpers
@using tictacApp.Services
@using AutoMapper

@inject IPlannedActivityCRUDService PlannedActivitiesService
@inject TimeLogsService TimelogsService
@inject IGenericCRUDServiceWithParents GenericCRUDServiceWithParents
@inject ISettingsService SettingsService
@inject IMapper Mapper
@inject NavigationManager Navigation


<ActivitiesFollowupComponent
        PageTitle="Activities follow-up"
        ActivitiesSettings=@_activitiesSettings
        Projects=@_projects
        Objectives=@_objectives
        Loading=@_loading
        Error=@_error
        ErrorMessage=@_errorMessage
        GoToActivityInListAsync="@((activityToSelect) => NavigateToList(activityToSelect))"
        OnFilterChangedAsync="@(async (reportParams) => await Refresh(reportParams))">
</ActivitiesFollowupComponent>


@code {
    private PlannedActivitySettingsView _activitiesSettings;
    private PlannedActivityView[] _projects;
    private PlannedActivityView[] _objectives;

    private bool _loading = false;
    private bool _error = false;
    private string _errorMessage = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        await Refresh(new ReportParams()
        {
            ReportIdx = 1,
            NumberOfDays = 1
        });

        await base.OnInitializedAsync();
    }

    private async Task Refresh(ReportParams reportParams)
    {
        ResetErrorMessage();

        try
        {
            _loading = true;

            DateOnly today = DateOnly.FromDateTime(DateTime.Now);
            switch (reportParams.ReportIdx)
            {
                case 1:
                    await GetSettings();
                    await BuildPlannedActivitiesExpectedAsync(reportParams.NumberOfDays);
                    break;

                case 2:
                    await BuildExpectedThisQuarterAndNoTimeOnIt(today);
                    break;

                case 3:
                    await BuildExpectedThisMonthAndNoTimeOnIt(today);
                    break;
                
                case 4:
                    await BuildBehind(today);
                    break;
            }

        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Error when loading the data: {ex.Message}"; 
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task GetSettings()
    {
        Setting[] settings = await SettingsService.GetAllAsync();
        _activitiesSettings = SettingsService.MapPlannedActivitySettingsToView(settings);
    }

    private async Task BuildPlannedActivitiesExpectedAsync(int numberOfDays)
    {   
        DateTime targetDate = DateTime.Now.AddDays(numberOfDays);
        Project[]? projects = await PlannedActivitiesService.GetAllAsync<Project>(targetDate);
        if (projects is not null)
        {
            projects = projects.OrderBy(p => p.TargetDate).ThenBy(p => p.CompletionPercent).ToArray();
            _projects = Mapper.Map<PlannedActivityView[]>(projects);

            await AddBreadcrumbActivivities<Project>(_projects);
        }

        Objective[]? objectives = await PlannedActivitiesService.GetAllAsync<Objective>(targetDate);
        if (objectives is not null)
        {
            objectives = objectives.OrderBy(o => o.TargetDate).ThenBy(o => o.CompletionPercent).ToArray();
            _objectives = Mapper.Map<PlannedActivityView[]>(objectives);

            await AddBreadcrumbActivivities<Objective>(_objectives);
        }
    }

    private async Task BuildExpectedThisQuarterAndNoTimeOnIt(DateOnly today)
    {
        (DateTime, DateTime) dts = GetRangeCorrespondingToThisQuarter(today);

        await BuildExpectedFromDateToDateAndNoTimeOnIt(dts.Item1, dts.Item2);
    }

    private async Task BuildExpectedThisMonthAndNoTimeOnIt(DateOnly today)
    {
        (DateTime, DateTime) dts = GetRangeCorrespondingToThisMonth(today);

        await BuildExpectedFromDateToDateAndNoTimeOnIt(dts.Item1, dts.Item2);
    }

    private async Task BuildBehind(DateOnly today)
    {
        DateTime todayWithTime = FormattersHelper.GetEndDate(new DateTime(today.Year, today.Month, today.Day));

        Objective[] objectivesBehind = await PlannedActivitiesService.GetPlannedActivitiesBehind<Objective>(todayWithTime);
        _objectives = Mapper.Map<PlannedActivityView[]>(objectivesBehind);
        await AddBreadcrumbActivivities<Project>(_objectives);

        Project[] projectsBehind = await PlannedActivitiesService.GetPlannedActivitiesBehind<Project>(todayWithTime);
        _projects = Mapper.Map<PlannedActivityView[]>(projectsBehind);
        await AddBreadcrumbActivivities<Project>(_projects);
    }

   private async Task BuildExpectedFromDateToDateAndNoTimeOnIt(DateTime startDate, DateTime endDate)
    {
        //Get the objectives having a target date included in the quarter
        Objective[] objectives = await PlannedActivitiesService.GetPlannedActivitiesExpectedForQuarter<Objective>(startDate, endDate);

        //Keep only those not having timelogs
        int[] ids = objectives.Select(o => o.Id).ToArray();
        int?[] nullableIdsFromObjectives = Array.ConvertAll(ids, x => new int?(x));
        TimeLog[] timeLogs = await TimelogsService.GetTimelogsOfObjectivesBetweenDates(nullableIdsFromObjectives, startDate, endDate);
        int?[] idsFromTimeLogs = timeLogs.Select(tl => tl.ObjectiveId).ToArray();

        //in list 2 not in list 1
        var result = nullableIdsFromObjectives.Where(oid => idsFromTimeLogs.All(tlid => tlid != oid));
        IEnumerable<Objective> remainingObjectives = objectives.Where(o => result.Contains(o.Id));
        _objectives = Mapper.Map<PlannedActivityView[]>(remainingObjectives);
        await AddBreadcrumbActivivities<Project>(_objectives);

        //Get the projects having a target date included in the quarter
        Project[] projects = await PlannedActivitiesService.GetPlannedActivitiesExpectedForQuarter<Project>(startDate, endDate);

        //keep only those not having timelogs
        ids = projects.Select(o => o.Id).ToArray();
        int?[] nullableIdsFromProjects = Array.ConvertAll(ids, x => new int?(x));
        timeLogs = await TimelogsService.GetTimelogsOfProjectsBetweenDates(nullableIdsFromProjects, startDate, endDate);
        idsFromTimeLogs = timeLogs.Select(tl => tl.ProjectId).ToArray();

        result = nullableIdsFromProjects.Where(oid => idsFromTimeLogs.All(tlid => tlid != oid));
        IEnumerable<Project> remainingProjects = projects.Where(o => result.Contains(o.Id));
        _projects = Mapper.Map<PlannedActivityView[]>(remainingProjects);
        await AddBreadcrumbActivivities<Project>(_projects);
    }

    private static (DateTime, DateTime) GetRangeCorrespondingToThisQuarter(DateOnly today)
    {
        int quarterNumber = (today.Month-1)/3+1;
        DateTime firstDayOfQuarter = new DateTime(today.Year, (quarterNumber-1) * 3 + 1, 1, 0, 0, 0);
        DateTime lastDayOfQuarter = FormattersHelper.GetEndDate(firstDayOfQuarter).AddMonths(3).AddDays(-1);

        return (firstDayOfQuarter, lastDayOfQuarter);
    }

    private static (DateTime, DateTime) GetRangeCorrespondingToThisMonth(DateOnly today)
    {
        DateTime firstDayOfMonth = new DateTime(today.Year, today.Month, 1, 0, 0, 0);
        DateTime lastDayOfMonth = FormattersHelper.GetEndDate(firstDayOfMonth).AddMonths(1).AddDays(-1);

        return (firstDayOfMonth, lastDayOfMonth);
    }


    private async Task AddBreadcrumbActivivities<T>(PlannedActivityView[] activities )where T: class, IIdLabel, IParent
    {
        int[] ids = activities.Select(a => a.Id).ToArray();

        Dictionary<int, string> breadcrumbsPerActivity = await BreadcrumbHelper.BuildSimpifiedBreadcrumb<T>(GenericCRUDServiceWithParents, ids, true);

        foreach (KeyValuePair<int, string> bc in breadcrumbsPerActivity)
        {
            PlannedActivityView? pav = activities.FirstOrDefault(a => a.Id == bc.Key);
            if (pav != null)
            {
                pav.BreadcrumbPath = bc.Value;
            }
        }
    }

    private void NavigateToList(PlannedActivityView activity)
    {
        string listType = (_projects.Any(p => p.Id == activity.Id)) ? "projects" : "objectives";
        string uri = $"/{listType}";
        
        if (activity.ParentId.HasValue)
        {
            uri = $"{uri}/{activity.ParentId.Value}";
        } 

        Navigation.NavigateTo(uri);
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }
}