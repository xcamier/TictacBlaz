@page "/"

@using tictacApp.Helpers
@using tictacApp.Data
@using tictacApp.Services

@inject ISnackbar Snackbar
@inject TimeLogsService TimeLogsService
@inject GenericCRUDService<TimeLog> GenericTimelogsService


<PageTitle>Time logs</PageTitle>

<MudText Class="ml-2 mb-4" Typo="Typo.h5">Time Logs</MudText>

@if (_timeLogs == null)
{
    <MudText Class="ml-2 mb-4" Typo="Typo.body1">Loading...</MudText>
}
else
{
    <MudPaper Class="ml-2 mr-2 pa-4 mb-4">
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small" Class="d-inline-flex">
            <MudIconButton Icon="@Icons.Material.Filled.NavigateBefore" OnClick="@PrevDayAsync"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.NavigateNext" Disabled="@_forbidNextDay" OnClick="@NextDayAsync"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Today" OnClick="@TodayAsync"></MudIconButton>
        </MudButtonGroup>

        <MudButtonGroup DisableElevation="true" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" Class="d-inline-flex ml-4">
            <MudButton StartIcon="@AppIcons.Add" Href="logs/addLog">Add Log</MudButton>
        </MudButtonGroup>
    </MudPaper>

    <MudPaper Class="d-inline-flex ml-2 pa-4">
        <MudText>Total for @_selectedDay.ToLongDateString(): @_totalForDay</MudText>
    </MudPaper>
    <MudPaper Class="d-inline-flex pa-4">
        <MudText>Total for the week: @_totalForWeek</MudText>
    </MudPaper>

    <MudTable Items="@_timeLogs" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
                Class="ml-2 mr-2 mt-4">
        <ColGroup>
            <col />
            <col />
            <col style="width: 50%;"/>
            <col style="width: 120px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Start Date</MudTh>
            <MudTh>Time Spent</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Start Date">@context.StartDate</MudTd>
            <MudTd DataLabel="Time Spent">@context.TimeSpentInHHMM</MudTd>
            <MudTd DataLabel="Time Spent">@context.Description</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Size="@Size.Small" Icon="@AppIcons.Edit" HRef="@($"/logs/{context.Id}/editLog")" />
                <MudIconButton Size="@Size.Small" Icon="@AppIcons.Delete" OnClick="@(async () => await DeleteTimeLogAsync(context))" />
            </MudTd>
        </RowTemplate>
    </MudTable>


    @if (_error)
    {
        <MudAlert Class="mt-4" Severity="Severity.Error" Variant="Variant.Filled">@_errorMessage</MudAlert>
    }
}



@code {
    private TimeLog[]? _timeLogs;
    private bool _loading = false;
    private DateOnly _selectedDay = DateOnly.FromDateTime(DateTime.Now);
    private bool _forbidNextDay = true;
    private string _totalForDay = "No data";
    private string _totalForWeek = "No data";
    private bool _busy = false;
    private bool _error = false;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;

            await GetTimeLogsAsync();
        }
        finally
        {
            _loading = false;
        }

    }

    private async Task DeleteTimeLogAsync(TimeLog timeLogToRemove)
    {
        if (_busy)
        {
            return;
        }

        try
        {
            _busy = true;

            bool res = await GenericTimelogsService.DeleteAsync(timeLogToRemove);

            ResetErrorMessage();

            if (res )
            {
                Snackbar.Add("Timelog deleted successfully", Severity.Success);
                await GetTimeLogsAsync();
            }
            else
            {
                Snackbar.Add("Error when deleting the timelog", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    private async Task PrevDayAsync()
    {
        _selectedDay = _selectedDay.AddDays(-1);
        _forbidNextDay = false;

        await GetTimeLogsAsync();
    }

    private async Task NextDayAsync()
    {
        _selectedDay = _selectedDay.AddDays(1);

        DateOnly today = DateOnly.FromDateTime(DateTime.Today);
        _forbidNextDay = (_selectedDay >= today);

        await GetTimeLogsAsync();
    }

    private async Task TodayAsync()
    {
        _selectedDay = DateOnly.FromDateTime(DateTime.Today);

        _forbidNextDay = true;

        await GetTimeLogsAsync();
    }

    private async Task GetTimeLogsAsync()
    {
        _timeLogs = await TimeLogsService.GetTimeLogsAsync(_selectedDay);
        _timeLogs.ToList().ForEach(tl => tl.TimeSpentInHHMM = FormattersHelper.MinToString(tl.TimeSpentInMin));  

        _totalForDay = FormattersHelper.MinToString(_timeLogs.Sum(s => s.TimeSpentInMin));
        
        int totalForWeek = await TimeLogsService.GetTimeSpentInWeek(_selectedDay);
        _totalForWeek = FormattersHelper.MinToString(totalForWeek);
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }
}