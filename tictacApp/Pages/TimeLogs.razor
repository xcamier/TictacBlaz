@page "/"

@using tictacApp.Data
@using tictacApp.Services

@inject ISnackbar Snackbar
@inject TimeLogsService TimeLogsService


<PageTitle>Time logs</PageTitle>

<MudText Class="ml-2 mb-4" Typo="Typo.h5">Time Logs</MudText>

@if (_timeLogs == null)
{
    <MudText Class="ml-2 mb-4" Typo="Typo.body1">Loading...</MudText>
}
else
{
    <MudPaper Class="ml-2 mr-2 pa-4 mb-4">
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small" Class="d-inline-flex">
            <MudIconButton Icon="@Icons.Material.Filled.NavigateBefore" OnClick="@PrevDayAsync"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.NavigateNext" Disabled="@_forbidNextDay" OnClick="@NextDayAsync"></MudIconButton>
        </MudButtonGroup>

        <MudButtonGroup DisableElevation="true" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" Class="d-inline-flex ml-4">
            <MudButton StartIcon="@Icons.Material.Filled.PostAdd" Href="addLog">Add Log</MudButton>
        </MudButtonGroup>
    </MudPaper>

    <MudPaper Class="d-inline-flex ml-2 pa-4">
        <MudText>Total for @_selectedDay.ToLongDateString(): xxxx</MudText>
    </MudPaper>
    <MudPaper Class="d-inline-flex pa-4">
        <MudText>Total for the week: xxxx</MudText>
    </MudPaper>

    <MudDataGrid T="TimeLog" Items="@_timeLogs" Bordered="true" Dense="true" Class="ml-2 mr-2 mt-4">
        <Columns>
            <Column T="TimeLog" Field="StartDate" Title="Start Date" />
            <Column T="TimeLog" Field="Description" />
            <Column T="TimeLog" CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" HRef="@($"editLog/{context.Item.Id}")" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" OnClick="@(async () => await DeleteTimeLogAsync(context.Item))" />
                </CellTemplate>
            </Column>
        </Columns>
    </MudDataGrid>

    @if (_error)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@_errorMessage</MudAlert>
    }
}



@code {
    private TimeLog[]? _timeLogs;

    private DateOnly _selectedDay = DateOnly.FromDateTime(DateTime.Now);
    private bool _forbidNextDay = true;
    private bool _busy = false;
    private bool _error = false;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetTimeLogsAsync();
    }

    private async Task DeleteTimeLogAsync(TimeLog timeLogToRemove)
    {
        if (_busy)
        {
            return;
        }

        try
        {
            _busy = true;

            bool res = await TimeLogsService.DeleteTimeLogAsync(timeLogToRemove);

            ResetErrorMessage();

            if (res )
            {
                Snackbar.Add("Timelog deleted successfully", Severity.Success);
                await GetTimeLogsAsync();
            }
            else
            {
                Snackbar.Add("Error when deleting the timelog", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    void EditItem()
    {

    }

    private async Task PrevDayAsync()
    {
        _selectedDay = _selectedDay.AddDays(-1);
        _forbidNextDay = false;
        await GetTimeLogsAsync();
    }

    private async Task NextDayAsync()
    {
        _selectedDay = _selectedDay.AddDays(1);

        DateOnly today = DateOnly.FromDateTime(DateTime.Now);
        _forbidNextDay = (_selectedDay >= today);

        await GetTimeLogsAsync();
    }

    private async Task GetTimeLogsAsync()
    {
        _timeLogs = await TimeLogsService.GetTimeLogsAsync(_selectedDay);
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }
}