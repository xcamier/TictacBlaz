@page "/"
@attribute [Authorize]

@using Microsoft.AspNetCore.WebUtilities
@using tictacApp.Helpers
@using tictacApp.Data
@using tictacApp.Services
@using tictacApp.Interfaces

@inject ISnackbar Snackbar
@inject TimeLogsService TimeLogsService
@inject IGenericCRUDService GenericTimelogsService
@inject NavigationManager Navig

<ListTemplate PageTitle="Time logs" Loading=@_loading Error=@_error ErrorMessage=@_errorMessage ShowFilterArea=@_searchMode>

    <ButtonsAreaContent>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small" Class="d-inline-flex">
            <MudIconButton Icon="@Icons.Material.Filled.NavigateBefore" OnClick="@PrevDayAsync"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.NavigateNext" Disabled="@_forbidNextDay" OnClick="@NextDayAsync"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Today" Title="Today" OnClick="@TodayAsync"></MudIconButton>
        </MudButtonGroup>

        <MudButtonGroup DisableElevation="true"  OverrideStyles="false"  Class="d-inline-flex ml-4">
            <MudButton StartIcon="@AppIcons.AddLog" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" 
                        Href="/logs/addLog">Add Log</MudButton>
            <MudButton StartIcon="@AppIcons.QuickLog" Variant="Variant.Filled" Size="Size.Small" Color=@(_isPreviousTimelogAQuicklog ? Color.Success : Color.Primary) 
                        OnClick="@SetupQuickLogAsync" Class="ml-2">Quick Log</MudButton>
            <MudButton StartIcon="@AppIcons.Search" Variant="Variant.Filled" Size="Size.Small" Color=@(_searchMode ? Color.Success : Color.Primary) 
                        OnClick="@ToogleSearchModeAsync" Class="ml-8">Search</MudButton>
        </MudButtonGroup>
    </ButtonsAreaContent>   

    <FiltersAreaContent>    
        <MudGrid>
            <MudItem xs="3">
                <MudTextField  DebounceInterval="500" OnDebounceIntervalElapsed="HandleIntervalElapsedAsync" 
                                Label="Search" Variant="Variant.Text"
                                Adornment="Adornment.End" AdornmentIcon="@AppIcons.Search" AdornmentColor="Color.Secondary"
                                @bind-Value="_search" />
            </MudItem>
        </MudGrid>
    </FiltersAreaContent>
    
    <ListAreaContent>
        @if (!_searchMode)
        {
            <MudPaper Class="d-inline-flex ml-2 pa-4">
                <MudText>Total for @_selectedDay.ToLongDateString(): @_totalForDay</MudText>
            </MudPaper>
            <MudPaper Class="d-inline-flex pa-4">
                <MudText>Total for the week: @_totalForWeek</MudText>
            </MudPaper>
        }
        <MudTable Items="@_timeLogs" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
                    Class="ml-2 mr-2 mt-4">
            <ColGroup>
                @if (_searchMode)
                {
                    <col style="width: 10%;"/>
                }
                <col style="width: 10%;"/>
                <col style="width: 10%;"/>
                <col style="width: 10%;"/>
                <col />
                <col style="width: 120px;"/>
            </ColGroup>
            <HeaderContent>
                @if (_searchMode)
                {
                    <MudTh>Timelog Date</MudTh>
                }                    
                <MudTh>Start Time</MudTh>
                <MudTh>End Time</MudTh>
                <MudTh Style=" text-align:center;">Time Spent</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                @if (_searchMode)
                {
                    <MudTh>@context.StartDate.Value.ToString("m")</MudTh>
                } 
                <MudTd DataLabel="Start Time">@context.StartDate.Value.ToString("t")</MudTd>
                <MudTd DataLabel="End Time">@context.StartDate.Value.AddMinutes(@context.TimeSpentInMin).ToString("t")</MudTd>
                <MudTd DataLabel="Time Spent" Style="text-align:right;">@context.TimeSpentInHHMM</MudTd>
                <MudTd DataLabel="Time Spent">@context.Description</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Size="@Size.Small" Icon="@AppIcons.Edit" HRef="@($"/logs/{context.Id}/editLog")" />
                    <MudIconButton Size="@Size.Small" Icon="@AppIcons.Duplicate" HRef="@($"/logs/addLog/{context.Id}")" />
                    <MudIconButton Size="@Size.Small" Icon="@AppIcons.Delete" OnClick="@(async () => await DeleteTimeLogAsync(context))" />
                </MudTd>
            </RowTemplate>
        </MudTable>

        <DeleteBoxComponent @ref="_mbox" />
    </ListAreaContent>
    
</ListTemplate>

@code {
    [CascadingParameter] 
    protected Task<AuthenticationState> AuthStat { get; set; }

    private TimeLog[]? _timeLogs;
    private bool _loading = false;
    private DateOnly _selectedDay = DateOnly.FromDateTime(DateTime.Now);
    private bool _forbidNextDay = true;
    private string _totalForDay = "No data";
    private string _totalForWeek = "No data";
    private bool _busy = false;
    private bool _error = false;
    private string _errorMessage = string.Empty;
    private bool _isPreviousTimelogAQuicklog = false;
    private string _search = string.Empty;
    private bool _searchMode = false;

    private DeleteBoxComponent _mbox;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;

            await GetTimeLogsAsync();
            await SetQuickLogButtonColorAsync();
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task DeleteTimeLogAsync(TimeLog timeLogToRemove)
    {
        if (_busy)
            return;

        try
        {
            bool? result = await _mbox.ShowAsync();
            StateHasChanged();

            if (result == null)
                return;

            _busy = true;

            bool res = await GenericTimelogsService.DeleteAsync<TimeLog>(timeLogToRemove);

            ResetErrorMessage();

            if (res )
            {
                Snackbar.Add("Timelog deleted successfully", Severity.Success);
                await GetTimeLogsAsync();
                await SetQuickLogButtonColorAsync();
            }
            else
            {
                Snackbar.Add("Error when deleting the timelog", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    private async Task PrevDayAsync()
    {
        _selectedDay = _selectedDay.AddDays(-1);
        _forbidNextDay = false;

        await GetTimeLogsAsync();
    }

    private async Task NextDayAsync()
    {
        _selectedDay = _selectedDay.AddDays(1);

        DateOnly today = DateOnly.FromDateTime(DateTime.Today);
        _forbidNextDay = (_selectedDay >= today);

        await GetTimeLogsAsync();
    }

    private async Task TodayAsync()
    {
        _selectedDay = DateOnly.FromDateTime(DateTime.Today);

        _forbidNextDay = true;

        await GetTimeLogsAsync();
    }

    private async Task GetTimeLogsAsync()
    {
        _timeLogs = await TimeLogsService.GetTimeLogsAsync(_selectedDay);
        FinalizeTimeLogsDisplay();

        _totalForDay = FormattersHelper.MinToString(_timeLogs.Sum(s => s.TimeSpentInMin));
        
        int totalForWeek = await TimeLogsService.GetTimeSpentInWeekAsync(_selectedDay);
        _totalForWeek = FormattersHelper.MinToString(totalForWeek);
    }

    private async Task GetTimeLogsAsync(string search)
    {
        _timeLogs = await TimeLogsService.GetTimeLogsAsync(search);
        FinalizeTimeLogsDisplay();
    }

    private void FinalizeTimeLogsDisplay()
    {
        _timeLogs = _timeLogs.OrderByDescending(tl => tl.StartDate).ToArray();
        _timeLogs.ToList().ForEach(tl => tl.TimeSpentInHHMM = FormattersHelper.MinToString(tl.TimeSpentInMin));  
    }

    private async Task SetupQuickLogAsync()
    {
        if (_busy)
        {
            return;
        }

        try
        {
            _busy = true;
            DateTime now = DateTime.Now;
            bool hasAlreadyAQuicklog = await CheckIfHasAlreadyAQuicklogAsync(now);
            if (hasAlreadyAQuicklog)
            {
                await ProcessPreviousQuicklogAsync(now);
            }
            else
            {
                await CreateNewQuicklogAsync(now);
            }
            await SetQuickLogButtonColorAsync();
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    private async Task<bool> CheckIfHasAlreadyAQuicklogAsync(DateTime now)
    {
        return await TimeLogsService.CheckIfPreviousTimelogIsAQuicklogAsync(now);
    }

    private async Task ProcessPreviousQuicklogAsync(DateTime now)
    {
        TimeLog? timelog = await TimeLogsService.GetPreviousTimelogIfItIsAQuicklogAsync(now);
        if (timelog is not null)
        {
            TimeSpan? res = now - timelog.StartDate;
            int inMins = 0;
            if (res is not null)
            {
                inMins = Convert.ToInt32(Math.Round(res.Value.TotalMinutes));
            }

            string url = $"/logs/{timelog.Id}/editLog";
            Dictionary<string, string?> param = new Dictionary<string, string?>() { { "TimeSpentInMin", inMins.ToString() } };

            Uri newUrl = new Uri(QueryHelpers.AddQueryString(url, param), UriKind.Relative);

            Navig.NavigateTo(newUrl.OriginalString);
        }
    }

    private async Task CreateNewQuicklogAsync(DateTime now)
    {
        TimeLog timeLogEntity = new TimeLog()
        {
            StartDate = now,
            TimeSpentInMin = 1,
            Description = DefaultTexts.QuickTimelog
        };
        IEnumerable<int> selectedChars = new List<int>();
        IEnumerable<int> selectedTags = new List<int>();

        bool res = await TimeLogsService.AddAsync<TimeLog>(timeLogEntity, selectedChars, selectedTags);

        ResetErrorMessage();

        if (res)
        {
            Snackbar.Add("Quick Timelog added successfully", Severity.Success);
            await GetTimeLogsAsync();
        }
        else
        {
            Snackbar.Add("Error when adding the quick timelog", Severity.Warning);
        }
    }

    private async Task SetQuickLogButtonColorAsync()
    {
        _isPreviousTimelogAQuicklog = await TimeLogsService.CheckIfPreviousTimelogIsAQuicklogAsync(DateTime.Now);
    }

    private async Task ToogleSearchModeAsync()
    {
        _searchMode = !_searchMode;

        if (_searchMode)
        {
            _timeLogs = new TimeLog[0]; //Empty the list 
        }
        else
        {
            _search = string.Empty;
            await GetTimeLogsAsync();
        }

    }

    private async Task HandleIntervalElapsedAsync(string debouncedText)
    {
        if (string.IsNullOrEmpty(debouncedText))
        {   
            _timeLogs = new TimeLog[0]; //Empty the list 
        }
        else
        {
            await GetTimeLogsAsync(debouncedText);
        }
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }
}