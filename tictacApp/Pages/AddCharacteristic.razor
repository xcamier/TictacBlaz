@page "/characteristics/addCharacteristic"
@page "/characteristics/{CharacteristicId:int}/addCharacteristic"

@using tictacApp.Data
@using tictacApp.Helpers
@using tictacApp.Interfaces

@inject IGenericCRUDServiceWithParents CharacteristicsService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar


@if (_characteristic is not null && _areDependenciesOk)
{
    <CharacteristicForm Busy="@_busy" 
                Characteristic="@_characteristic" 
                IsAdd="true"
                CancelRequest="Cancel"
                ValidationResult="@(async (success) => await ValidationResultAsync(success))" />

    @if (_error)
    {
        <MudAlert Class="mt-4" Severity="Severity.Error" Variant="Variant.Filled">@_errorMessage</MudAlert>
    }
}
else if (!_areDependenciesOk) 
{
    <ConfigureDependenciesForm
        Dependencies="@_dependencies"
        Target="Characteristics" />
}

@code {
    [Parameter]
    public int? CharacteristicId { get; set; } = null;

    private Characteristic? _characteristic { get; set; }
    private bool _busy;
    private bool _error;
    private string _errorMessage = string.Empty;

    private bool _areDependenciesOk = false;
    Tuple<string, string>[] _dependencies = new Tuple<string, string>[0];


    protected override async Task OnInitializedAsync()
    {
        await CheckDependencies();

        _characteristic = new Characteristic();
        _characteristic.ParentId = CharacteristicId;
    }

    private async Task CheckDependencies()
    {
        DependenciesChecker<Characteristic> checker = new DependenciesChecker<Characteristic>(CharacteristicsService);
        await checker.CheckGradesDependecy();
        await checker.CheckGroupOfCharacteristicssDependecy();
        _areDependenciesOk = checker.AreDependenciesOk;
        _dependencies = checker.GetUnsatisfiedDependencies();
    }

    private async Task ValidationResultAsync(bool success)
    {
        if (_busy)
        {
            return;
        }

        if (!success)
        {
            Snackbar.Add("Unable to add the characteristic", Severity.Warning);

            ResetErrorMessage();
            return;
        }

        try
        {
            _busy = true;

            bool res = await CharacteristicsService.AddAsync<Characteristic>(_characteristic);

            ResetErrorMessage();

            if (res )
            {
                Snackbar.Add("Characteristic added successfully", Severity.Success);
                GoBackToList();
            }
            else
            {
                Snackbar.Add("Error when adding the characteristic", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    // Back to list.
    private void Cancel()
    {
        GoBackToList();
    }

    private void GoBackToList()
    {
        string url = string.Empty;
        if (CharacteristicId.HasValue)
        {
            url = $"/characteristics/{CharacteristicId}";
        }
        else
        {
            url = "/characteristics";
        }
        Navigation.NavigateTo(url);
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }
}