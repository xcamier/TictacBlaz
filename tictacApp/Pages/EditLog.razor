@page "/logs/{TimeLogId:int}/editLog"
@page "/logs/{TimeLogId:int}/editLogFromProjectSelection"
@page "/logs/{TimeLogId:int}/editLogFromObjectiveSelection"
@page "/logs/{TimeLogId:int}/editLogFromCharacteristicSelection"

@using Microsoft.EntityFrameworkCore

@using tictacApp.Helpers
@using tictacApp.Data
@using tictacApp.Services
@using tictacApp.ViewModels
@using tictacApp.Interfaces

@using AutoMapper

@inject NavigationManager Navigation
@inject TimeLogsService TimeLogsService
@inject IGenericCRUDServiceWithParents CRUDService

@inject ItemSelectionService<ProjectView, TimeLogView> ProjectSelectionService
@inject ItemSelectionService<ObjectiveView, TimeLogView> ObjectiveSelectionService
@inject ItemSelectionService<CharacteristicView, TimeLogView> CharacteristicSelectionService

@inject IMapper Mapper;

@inject ISnackbar Snackbar

@if (_timeLog is null && !_busy)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">Could not find the timelog for id: @TimeLogId</MudAlert>
}
else if (_timeLog is not null && _areDependenciesOk && !_busy)
{
    <TimeLogForm Busy=@_busy 
                 TimeLog=@_timeLog
                 IsAdd=false
                 CancelRequest="Cancel"
                 BackFromSelection=@_backFromSelection
                 ValidationResult="@(async (success) => await ValidationResultAsync(success))" />
}
else if (!_areDependenciesOk)
{
    <ConfigureDependenciesComponent
        Dependencies="@_dependencies"
        Target="TimeLogs" />
}

@if (_error)
{
    <MudAlert Class="mt-4" Severity="Severity.Error" Variant="Variant.Filled">@_errorMessage</MudAlert>
}

@code {
    [Parameter]
    public int TimeLogId { get; set; }

    private TimeLogView? _timeLog;

    private bool _busy;
    private bool _error;
    private string _errorMessage = string.Empty;
    private bool _concurrencyError = false;

    private bool _areDependenciesOk = false;
    Tuple<string, string>[] _dependencies = new Tuple<string, string>[0];
    private bool _backFromSelection = false;


    protected override async Task OnInitializedAsync()
    {
       _timeLog =   new TimeLogView(CRUDService);

        try
        {
            _backFromSelection = false;
            _busy = true;
            ResetErrorMessage();

            await CheckDependencies();
            if (!_areDependenciesOk)
            {
                return;
            }

            string uri = Navigation.Uri;
            SelectionSource source = LogDependenciesSelectionHelper.ComesFromSelection(uri);

            if (source == SelectionSource.Project)
            {
                _timeLog = ProjectSelectionService.EntityBackup;

                if (ProjectSelectionService.HasSelected && ProjectSelectionService.Selection.Any())
                {
                    _timeLog.ProjectId = ProjectSelectionService.Selection.Single().Id;
                }

                ProjectSelectionService.Reset();
            }
            else if (source == SelectionSource.Objective)
            {
                _timeLog = ObjectiveSelectionService.EntityBackup;

                if (ObjectiveSelectionService.HasSelected && ObjectiveSelectionService.Selection.Any())
                {
                    _timeLog.ObjectiveId = ObjectiveSelectionService.Selection.Single().Id;
                }

                ObjectiveSelectionService.Reset();
            }
            else if (source == SelectionSource.Characteristic)
            {
                _backFromSelection = true;
                _timeLog = CharacteristicSelectionService.EntityBackup;
            }
            else
            {
                TimeLog? dbTimelog = await TimeLogsService.FindFromIdAsync<TimeLog>(TimeLogId);
                if (dbTimelog != null)
                {
                    Mapper.Map(dbTimelog, _timeLog);
                }
                else
                {
                    _error = true;
                    _errorMessage = $"Unable to find the timelog with id: {TimeLogId}";
                }
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }

        await base.OnInitializedAsync();
    }
    
    private async Task ValidationResultAsync(bool success)
    {
        if (_busy)
        {
            return;
        }

        if (!success)
        {
            Snackbar.Add("Unable to modify the timelog", Severity.Warning);

            _concurrencyError = false;
            ResetErrorMessage();
            return;
        }

        try
        {
            _busy = true; 

            ResetErrorMessage();

            bool savingRes = false;
            
            using var dbContext = TimeLogsService.GetNewDBContext();
            if (dbContext is not null)
            {
                TimeLog? timeLogEntity = await TimeLogsService.FindFromIdAsync<TimeLog>(dbContext, _timeLog.Id);
                if (timeLogEntity is not null)
                {
                    IEnumerable<int> existingChars = timeLogEntity.Characteristics.Select(c => c.Id);
                    IEnumerable<int> selectedChars = _timeLog.Characteristics.Select(c => c.Id);
                    IEnumerable<int> charsToRemove = existingChars.Where(ec => selectedChars.All(sc => sc != ec));
                    IEnumerable<int> charsToAdd = selectedChars.Where(sc => existingChars.All(ec => ec != sc));

                    IEnumerable<int> existingTags = timeLogEntity.Tags.Select(t => t.Id);
                    IEnumerable<int> selectedTags = _timeLog.Tags.Select(t => t.Id);
                    IEnumerable<int> tagsToRemove = existingTags.Where(et => selectedTags.All(st => st != et)); 
                    IEnumerable<int> tagsToAdd = selectedTags.Where(st => existingTags.All(et => et != st));                       

                    Mapper.Map<TimeLogView, TimeLog>(_timeLog, timeLogEntity);

                    savingRes = await TimeLogsService.UpdateAsync<TimeLog>(dbContext, timeLogEntity, 
                                                                            charsToAdd, charsToRemove,
                                                                            tagsToAdd, tagsToRemove);
                }
            }

            ResetErrorMessage();


            if (savingRes )
            {
                Snackbar.Add("Timelog modified successfully", Severity.Success);
                GoBackToList();
            }
            else
            {
                Snackbar.Add("Error when modifying the timelog", Severity.Warning);
            }
        }
        catch (DbUpdateConcurrencyException dbex)
        {
            // concurrency issues!
            _concurrencyError = true;

            // get values from database
            var dbValues = dbex.Entries[0].GetDatabaseValues();

            if (dbValues is null)
            {
                // deleted - show contact not found
                Snackbar.Add("The timelog could not be updated and is not found in DB. It was probably deleted before you saved.", Severity.Warning);
                GoBackToList();
                return;
            }

            // bind to show labels on form
            _timeLog = (TimeLogView)dbValues.ToObject();

            // move to original so second submit works (unless there is another concurrent edit)
            dbex.Entries[0].OriginalValues.SetValues(dbValues);
            ResetErrorMessage();
            _busy = false;
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    private async Task CheckDependencies()
    {
        _areDependenciesOk = true;
    }

    // Back to list.
    private void Cancel()
    {
        GoBackToList();
    }

    private void GoBackToList()
    {
        Navigation.NavigateTo("/");
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }
}