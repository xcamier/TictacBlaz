@page "/actors"

@using tictacApp.Data
@using tictacApp.Helpers
@using tictacApp.Interfaces

@inject IActorsCRUDService CRUDService
@inject ISnackbar Snackbar


<ListTemplate PageTitle="Actors" Loading=@_loading Error=@_error ErrorMessage=@_errorMessage>

    <ButtonsAreaContent>
        <MudButton StartIcon="@AppIcons.Add" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" 
                    Href="/actors/addActor" Class="d-inline-flex">Add Actor</MudButton>
    </ButtonsAreaContent>

    <FiltersAreaContent>
        <MudSwitch T="bool" Color="Color.Primary" Label="Inactives Only"
                    Checked="@_displayInactivesOnly" CheckedChanged="@(async (e) => await DisplayInactivesChanged(this, e))"  />
    </FiltersAreaContent>

    <ListAreaContent>
        <MudTable Items="@_actors" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
                    Class="ml-2 mr-2 mt-4">
            <ColGroup>
                <col />
                <col style="width: 120px;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Size="@Size.Small" Icon="@AppIcons.Edit" HRef="@($"/actors/{context.Id}/editActor")" />
                    <MudIconButton Size="@Size.Small" Icon="@AppIcons.Delete" OnClick="@(async () => await DeleteActorAsync(context))" />
                </MudTd>
            </RowTemplate>
        </MudTable>

        <DeleteBoxComponent @ref="_mbox" />
    </ListAreaContent>

</ListTemplate>


@code {
    private Actor[]? _actors;
    private bool _displayInactivesOnly = false;
    private bool _loading = false;
    private bool _busy = false;
    private bool _error = false;
    private string _errorMessage = string.Empty;

    private DeleteBoxComponent _mbox;

    protected override async Task OnInitializedAsync()
    {
        await GetActorsAsync();
    }

    private async Task GetActorsAsync()
    {
        try
        {
            _loading = true;
            _actors = await CRUDService.GetAllAsync(_displayInactivesOnly);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task DeleteActorAsync(Actor actorToRemove)
    {
        if (_busy)
            return;

        try
        {
            bool? result = await _mbox.ShowAsync();
            StateHasChanged();

            if (result == null)
                return;

            _busy = true;

            bool res = await CRUDService.DeleteAsync<Actor>(actorToRemove);

            ResetErrorMessage();

            if (res )
            {
                Snackbar.Add("Actor deleted successfully", Severity.Success);
                await GetActorsAsync();
            }
            else
            {
                Snackbar.Add("Error when deleting the actor", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }

    private async Task DisplayInactivesChanged(object Sender, bool newValue)
    {
        _displayInactivesOnly = newValue;
        await GetActorsAsync();
    }
}