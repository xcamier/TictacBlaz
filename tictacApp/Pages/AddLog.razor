@page "/logs/addLog"
@page "/logs/addLogFromProjectSelection"
@page "/logs/addLogFromObjectiveSelection"
@page "/logs/addLogFromCharacteristicSelection"

@using Data
@using Helpers
@using tictacApp.Services

@inject TimeLogsService TimeLogsService
@inject GenericCRUDServiceWithParents<Project> ProjectsService
@inject GenericCRUDServiceWithParents<Objective> ObjectivesService
@inject GenericCRUDServiceWithParents<Characteristic> CharacteristicsService
@inject ItemSelectionService<Project> ProjectSelectionService;
@inject ItemSelectionService<Objective> ObjectiveSelectionService;
@inject ItemSelectionService<Data.Characteristic> CharacteristicSelectionService;
@inject NavigationManager Navigation
@inject ISnackbar Snackbar


@if (_timeLog is not null && _areDependenciesOk)
{
    <TimeLogForm Busy="@_busy" 
                   TimeLog="@_timeLog" 
                   IsAdd="true"
                   CancelRequest="Cancel"
                   ValidationResult="@(async (success) => await ValidationResultAsync(success))" />

    @if (_error)
    {
        <MudAlert Class="mt-4" Severity="Severity.Error" Variant="Variant.Filled">@_errorMessage</MudAlert>
    }
}
else if (!_areDependenciesOk) 
{
    <ConfigureDependenciesForm
        Dependencies="@_dependencies"
        Target="Time logs" />
}


@code {
    private TimeLog? _timeLog { get; set; }
    private bool _busy;
    private bool _error;
    private string _errorMessage = string.Empty;

    private bool _areDependenciesOk = false;
    Tuple<string, string>[] _dependencies = new Tuple<string, string>[0];

    protected override async Task OnInitializedAsync()
    {
        await CheckDependencies();

        string uri = Navigation.Uri;
        SelectionSource source = LogDependenciesSelectionHelper.ComesFromSelection(uri);

        if (source == SelectionSource.Project)
        {
            _timeLog = ProjectSelectionService.EntityBackup;

            if (ProjectSelectionService.HasSelected && ProjectSelectionService.Selection.Any())
            {
                _timeLog.ProjectId = ProjectSelectionService.Selection.Single().Id;

                string asText = await BreadcrumbHelper.BuildSimpifiedBreadcrumb<Project>(ProjectsService, _timeLog.ProjectId.Value);
                _timeLog.ProjectsAsText = asText;
            }
            
            ProjectSelectionService.Reset();
        }
        else if (source == SelectionSource.Objective)
        {
            _timeLog = ObjectiveSelectionService.EntityBackup;

            if (ObjectiveSelectionService.HasSelected && ObjectiveSelectionService.Selection.Any())
            {
                _timeLog.ObjectiveId = ObjectiveSelectionService.Selection.Single().Id;

                string asText = await BreadcrumbHelper.BuildSimpifiedBreadcrumb<Objective>(ObjectivesService, _timeLog.ObjectiveId.Value);
                _timeLog.ObjectivesAsText = asText;
            }  

            ObjectiveSelectionService.Reset();
        }
        else if (source == SelectionSource.Characteristic)
        {
            _timeLog = CharacteristicSelectionService.EntityBackup;

            if (CharacteristicSelectionService.HasSelected && CharacteristicSelectionService.Selection.Any())
            {
                var selectedChar = CharacteristicSelectionService.Selection.Single();
                _timeLog.Characteristics.Add(selectedChar);

                string asText = await BreadcrumbHelper.BuildSimpifiedBreadcrumb<Characteristic>(CharacteristicsService, selectedChar.Id);
                _timeLog.ObjectivesAsText = asText;

                _timeLog.CharacteristicsAsText.Add(new KeyValuePair<int, string>(selectedChar.Id, asText));
            }  

            CharacteristicSelectionService.Reset();
        }
        else
        {
            DateTime now = DateTime.Now;
            _timeLog = new TimeLog
            {
                StartDate = now,
                TimeSpan = now.TimeOfDay
            };
        }
    }

    private async Task CheckDependencies()
    {
        /*DependenciesChecker checker = new DependenciesChecker(TimeLogsService);
        await checker.CheckActorDependency();
        _areDependenciesOk = checker.AreDependenciesOk;
        _dependencies = checker.GetUnsatisfiedDependencies();*/
        _areDependenciesOk = true;
    }


    private async Task ValidationResultAsync(bool success)
    {
        if (_busy)
        {
            return;
        }

        if (!success)
        {
            Snackbar.Add("Unable to add the timelog", Severity.Warning);

            ResetErrorMessage();
            return;
        }

        try
        {
            _busy = true;

            bool res = await TimeLogsService.AddTimeLogAsync(_timeLog);

            ResetErrorMessage();

            if (res )
            {
                Snackbar.Add("Timelog added successfully", Severity.Success);
                GoBackToList();
            }
            else
            {
                Snackbar.Add("Error when adding the timelog", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    // Back to list.
    private void Cancel()
    {
        GoBackToList();
    }

    private void GoBackToList()
    {
        Navigation.NavigateTo($"/");
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }
}