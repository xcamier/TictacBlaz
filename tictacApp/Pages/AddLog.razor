@page "/logs/addLog"
@page "/logs/addLogFromProjectSelection"
@page "/logs/addLogFromObjectiveSelection"
@page "/logs/addLogFromCharacteristicSelection"

@using tictacApp.Data
@using tictacApp.Helpers
@using tictacApp.Services
@using tictacApp.ViewModels
@using tictacApp.Interfaces
@using AutoMapper

@inject TimeLogsService TimeLogsService
@inject IGenericCRUDServiceWithParents CRUDService

@inject ItemSelectionService<ProjectView, TimeLogView> ProjectSelectionService
@inject ItemSelectionService<ObjectiveView, TimeLogView> ObjectiveSelectionService
@inject ItemSelectionService<CharacteristicView, TimeLogView> CharacteristicSelectionService

@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IMapper Mapper


@if (_timeLog is not null && _areDependenciesOk)
{
    <TimeLogForm Busy=@_busy 
                   TimeLog=@_timeLog 
                   IsAdd=true
                   CancelRequest="Cancel"
                   BackFromSelection=@_backFromSelection
                   ValidationResult="@(async (success) => await ValidationResultAsync(success))" />

    @if (_error)
    {
        <MudAlert Class="mt-4" Severity="Severity.Error" Variant="Variant.Filled">@_errorMessage</MudAlert>
    }
}
else if (!_areDependenciesOk) 
{
    <ConfigureDependenciesForm
        Dependencies=@_dependencies
        Target="Time logs" />
}


@code {
    private TimeLogView? _timeLog { get; set; }
    private bool _busy;
    private bool _error;
    private string _errorMessage = string.Empty;

    private bool _areDependenciesOk = false;
    Tuple<string, string>[] _dependencies = new Tuple<string, string>[0];

    private bool _backFromSelection = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckDependencies();

        if (!_areDependenciesOk)
        {
            return;
        }

        _backFromSelection = false;
        string uri = Navigation.Uri;
        SelectionSource source = LogDependenciesSelectionHelper.ComesFromSelection(uri);

        if (source == SelectionSource.Project)
        {
            _timeLog = ProjectSelectionService.EntityBackup;

            if (ProjectSelectionService.HasSelected && ProjectSelectionService.Selection.Any())
            {
                _timeLog.ProjectId = ProjectSelectionService.Selection.Single().Id;
            }
        
            ProjectSelectionService.Reset();
        }
        else if (source == SelectionSource.Objective)
        {
            _timeLog = ObjectiveSelectionService.EntityBackup;

            if (ObjectiveSelectionService.HasSelected && ObjectiveSelectionService.Selection.Any())
            {
                _timeLog.ObjectiveId = ObjectiveSelectionService.Selection.Single().Id;
            }  

            ObjectiveSelectionService.Reset();
        }
        else if (source == SelectionSource.Characteristic)
        {
            //Needs to be kept there to feed CharacteristicsSelector
            _backFromSelection = true;
            _timeLog = CharacteristicSelectionService.EntityBackup;
        }
        else
        {
            DateTime now = DateTime.Now;
            _timeLog = new TimeLogView(CRUDService)
            {
                StartDate = now,
                TimeSpan = now.TimeOfDay
            };
        }
    }

    private async Task CheckDependencies()
    {
        _areDependenciesOk = true;
    }

    private async Task ValidationResultAsync(bool success)
    {
        if (_busy)
        {
            return;
        }

        if (!success)
        {
            Snackbar.Add("Unable to add the timelog", Severity.Warning);

            ResetErrorMessage();
            return;
        }

        try
        {
            _busy = true;

            IEnumerable<int> selectedChars = _timeLog.Characteristics.Select(c => c.Id);
            IEnumerable<int> selectedTags = _timeLog.Tags.Select(t => t.Id);

            TimeLog timeLogEntity = Mapper.Map<TimeLog>(_timeLog);            
            bool res = await TimeLogsService.AddAsync<TimeLog>(timeLogEntity, selectedChars, selectedTags);

            ResetErrorMessage();

            if (res)
            {
                Snackbar.Add("Timelog added successfully", Severity.Success);
                GoBackToList();
            }
            else
            {
                Snackbar.Add("Error when adding the timelog", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    // Back to list.
    private void Cancel()
    {
        GoBackToList();
    }

    private void GoBackToList()
    {
        Navigation.NavigateTo($"/");
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }
}