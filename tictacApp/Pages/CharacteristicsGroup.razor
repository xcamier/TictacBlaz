@page "/characteristicsGroups"

@using tictacApp.Services
@using tictacApp.Data
@using tictacApp.Helpers

@inject CharacteristicsGroupsService CharacteristicsGroupsService
@inject ISnackbar Snackbar


<PageTitle>Groups of characteristics</PageTitle>

<MudText Class="ml-2 mb-4" Typo="Typo.h5">Groups of characteristics</MudText>

@if (_characteristicsGroup == null)
{
    <MudText Class="ml-2 mb-4" Typo="Typo.body1">Loading...</MudText>
}
else
{
    <MudPaper Class="ml-2 mr-2 pa-4 mb-4">
        <MudButton StartIcon="@AppIcons.Add" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" 
                    Href="/characteristicsGroups/addCharacteristicsGroup" Class="d-inline-flex">Add group of characteristics</MudButton>
    </MudPaper>

    <MudTable Items="@_characteristicsGroup" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
                Class="ml-2 mr-2 mt-4">
        <ColGroup>
            <col />
            <col style="width: 120px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Label</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Label">@context.Label</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Size="@Size.Small" Icon="@AppIcons.Edit" HRef="@($"/characteristicsGroups/{context.Id}/editCharacteristicsGroup")" />
                <MudIconButton Size="@Size.Small" Icon="@AppIcons.Delete" OnClick="@(async () => await DeleteCharacteristicsGroupAsync(context))" />
            </MudTd>
        </RowTemplate>
    </MudTable>

    @if (_error)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@_errorMessage</MudAlert>
    }
}

@code {
    private Data.CharacteristicsGroup[]? _characteristicsGroup;
    private bool _loading = false;
    private bool _busy = false;
    private bool _error = false;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetCharacteristicsGroupsAsync();
    }

    private async Task GetCharacteristicsGroupsAsync()
    {
        try
        {
            _loading = true;
            _characteristicsGroup = await CharacteristicsGroupsService.GetCharacteristicsGroupsAsync();
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task DeleteCharacteristicsGroupAsync(Data.CharacteristicsGroup characteristicsGroupToRemove)
    {
        if (_busy)
        {
            return;
        }

        try
        {
            _busy = true;

            bool res = await CharacteristicsGroupsService.DeleteCharacteristicsGroupAsync(characteristicsGroupToRemove);

            ResetErrorMessage();

            if (res )
            {
                Snackbar.Add("Group of characteristics deleted successfully", Severity.Success);
                await GetCharacteristicsGroupsAsync();
            }
            else
            {
                Snackbar.Add("Error when deleting the group of characteristics", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }
}