@page "/activitiesatrisk"

@using tictacApp.Data
@using tictacApp.Interfaces
@using tictacApp.ViewModels
@using tictacApp.Helpers
@using AutoMapper

@inject IPlannedActivityCRUDService PlannedActivitiesService
@inject ISettingsService SettingsService
@inject IMapper Mapper
@inject NavigationManager Navigation
@inject IGenericCRUDServiceWithParents GenericCRUDServiceWithParents

<ActivitiesAtRiskComponent
        PageTitle="Activities at risk"
        ActivitiesSettings=@_activitiesSettings
        Projects=@_projects
        Objectives=@_objectives
        Loading=@_loading
        Error=@_error
        ErrorMessage=@_errorMessage
        GoToActivityInListAsync="@((activityToSelect) => NavigateToList(activityToSelect))"
        OnFilterChangedAsync="@(async (selectedValue) => await Refresh(selectedValue))">
</ActivitiesAtRiskComponent>


@code {
    private PlannedActivitySettingsView _activitiesSettings;
    private PlannedActivityView[] _projects;
    private PlannedActivityView[] _objectives;

    private bool _loading = false;
    private bool _error = false;
    private string _errorMessage = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        await Refresh(1);

        await base.OnInitializedAsync();
    }

    private async Task Refresh(int numberOfDays)
    {
        ResetErrorMessage();

        try
        {
            await GetSettings();
            await GetPlannedActivitiesExpectedAsync(numberOfDays);
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Error when loading the data: {ex.Message}"; 
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task GetSettings()
    {
        Setting[] settings = await SettingsService.GetAllAsync();
        _activitiesSettings = SettingsService.MapPlannedActivitySettingsToView(settings);
    }

    private async Task GetPlannedActivitiesExpectedAsync(int numberOfDays)
    {   
        DateTime targetDate = DateTime.Now.AddDays(numberOfDays);
        Project[]? projects = await PlannedActivitiesService.GetAllAsync<Project>(targetDate);
        if (projects is not null)
        {
            projects = projects.OrderBy(p => p.TargetDate).ThenBy(p => p.CompletionPercent).ToArray();
            _projects = Mapper.Map<PlannedActivityView[]>(projects);

            await AddBreadcrumbActivivities<Project>(_projects);
        }

        Objective[]? objectives = await PlannedActivitiesService.GetAllAsync<Objective>(targetDate);
        if (objectives is not null)
        {
            objectives = objectives.OrderBy(o => o.TargetDate).ThenBy(o => o.CompletionPercent).ToArray();
            _objectives = Mapper.Map<PlannedActivityView[]>(objectives);

            await AddBreadcrumbActivivities<Objective>(_objectives);
        }
    }

    private async Task AddBreadcrumbActivivities<T>(PlannedActivityView[] activities )where T: class, IIdLabel, IParent
    {
        int[] ids = activities.Select(a => a.Id).ToArray();

        Dictionary<int, string> breadcrumbsPerActivity = await BreadcrumbHelper.BuildSimpifiedBreadcrumb<T>(GenericCRUDServiceWithParents, ids, true);

        foreach (KeyValuePair<int, string> bc in breadcrumbsPerActivity)
        {
            PlannedActivityView? pav = activities.FirstOrDefault(a => a.Id == bc.Key);
            if (pav != null)
            {
                pav.BreadcrumbPath = bc.Value;
            }
        }
    }

    private void NavigateToList(PlannedActivityView activity)
    {
        string listType = (_projects.Any(p => p.Id == activity.Id)) ? "projects" : "objectives";
        string uri = $"/{listType}";
        
        if (activity.ParentId.HasValue)
        {
            uri = $"{uri}/{activity.ParentId.Value}";
        } 

        Navigation.NavigateTo(uri);
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }
}


