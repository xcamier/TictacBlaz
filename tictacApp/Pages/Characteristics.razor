@page "/characteristics"
@page "/characteristics/{ParentCharacteristicId:int}"

@using tictacApp.Interfaces
@using tictacApp.Data
@using tictacApp.Helpers

@inject ICharacteristicCRUDService CharacteristicsService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar


<ListTemplate PageTitle="Characteristics" Loading=@_loading Error=@_error ErrorMessage=@_errorMessage>

    <BreadcrumbContent>
        <MudBreadcrumbs Items="_path">
            <ItemTemplate Context="item">
                <MudButton Variant="Variant.Text" StartIcon="@item.Icon" Size="Size.Small" OnClick="@(() => GoToSubCharacteristic(@item.Href))">@item.Text</MudButton>
            </ItemTemplate>
        </MudBreadcrumbs>
    </BreadcrumbContent>

    <ButtonsAreaContent>
        <MudButton StartIcon="@AppIcons.Add" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" 
                   OnClick="@(() => AddCharacteristic(ParentCharacteristicId))" Class="d-inline-flex">Add Characteristic</MudButton>
    </ButtonsAreaContent>

   <FiltersAreaContent>
        <MudSwitch T="bool" Color="Color.Primary" Label="Closed Only"
                    Checked="@_displayClosedOnly" CheckedChanged="@(async (e) => await DisplayClosedChanged(this, e))"  />
    </FiltersAreaContent>

    <ListAreaContent>
        <MudTable Items="@_characteristics" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
                    Class="ml-2 mr-2 mt-4">
            <ColGroup>
                <col />
                @if (_canGoOneLevelAbove)
                {
                    <col />
                }
                @if (!_canGoOneLevelAbove)
                {
                    <col />
                    <col />
                }
                <col style="width: 120px;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh>Primary Description</MudTh>
                @if (_canGoOneLevelAbove)
                {
                    <MudTh>Secondary Description</MudTh>
                }
                @if (!_canGoOneLevelAbove)
                {
                    <MudTh>Group</MudTh>
                    <MudTh>Grade</MudTh>
                }
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Primary Description">@context.Label</MudTd>
                @if (_canGoOneLevelAbove)
                {
                    <MudTd DataLabel="Secondary Description">@context.Description</MudTd>
                }
                @if (!_canGoOneLevelAbove)
                {
                    <MudTd DataLabel="Group">
                        @(context.CharacteristicsGroup is not null ? context.CharacteristicsGroup.Label : string.Empty)
                    </MudTd>
                    <MudTd DataLabel="Grade">
                        @(context.Grade is not null ? context.Grade.Label : string.Empty)
                    </MudTd>   
                }
                <MudTd DataLabel="Actions">
                    @if (_canGoOneLevelAbove)
                    {
                        <MudIconButton Size="@Size.Small" Icon=@GetHasChildrenIcon(context.Id) Title="Show Children Characteristics"
                                        OnClick="@(() => GoToSubCharacteristic(context.Id))" />
                    }
                    <MudIconButton Size="@Size.Small" Icon="@AppIcons.Edit" Title="Modify Characteristic"
                                     HRef="@($"/characteristics/{context.Id}/editCharacteristic")" />
                    <MudIconButton Size="@Size.Small" Icon="@AppIcons.Delete" Title="Delete Characteristic" 
                                    OnClick="@(async () => await DeleteCharacteristicAsync(context))" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </ListAreaContent>

</ListTemplate>


@code {
    [Parameter]
    public int? ParentCharacteristicId { get; set; } = null;

    private bool _displayClosedOnly = false;
    private List<BreadcrumbItem> _path = new List<BreadcrumbItem>();
    private Characteristic[]? _characteristics;
    private bool _loading = false;
    private bool _busy = false;
    private bool _error = false;
    private string _errorMessage = string.Empty;
    private bool _canGoOneLevelAbove = true;
    private IEnumerable<int>? _characteristicsWithChildren;

    protected override async Task OnInitializedAsync()
    {
        await BuildBreadcrumb();

        bool _hasTwoLevelsOfParents = await CharacteristicsServiceHelper.
                                        HasTwoLevelsOfParentsAsync(CharacteristicsService, ParentCharacteristicId);
        _canGoOneLevelAbove = !_hasTwoLevelsOfParents;

        await GetCharacteristicsAsync();
        await GetCharacteristicChildrenInfo();
    }

    private async Task BuildBreadcrumb()
    {
        KeyValuePair<int, string?>[] parentProjects = 
                    await CharacteristicsService.GetParentsAsync<Characteristic>(ParentCharacteristicId);
        _path = BreadcrumbHelper.BuildBreadcrumb("Characteristics", "characteristics", parentProjects);
    }

    private async Task GetCharacteristicsAsync()
    {
        try
        {
            _loading = true;
            _characteristics = await CharacteristicsService.GetAllAsync(ParentCharacteristicId, 
                                                                        !_canGoOneLevelAbove, _displayClosedOnly);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task DeleteCharacteristicAsync(Characteristic CharacteristicToRemove)
    {
        if (_busy)
        {
            return;
        }

        try
        {
            _busy = true;

            bool res = await CharacteristicsService.DeleteAsync<Characteristic>(CharacteristicToRemove);

            ResetErrorMessage();

            if (res )
            {
                Snackbar.Add("Characteristic deleted successfully", Severity.Success);
                await GetCharacteristicsAsync();
            }
            else
            {
                Snackbar.Add("Error when deleting the Characteristic", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }

    private void GoToSubCharacteristic(int subCharacteristicId)
    {
        GoToSubCharacteristic($"/characteristics/{subCharacteristicId}");
    }

    private void GoToSubCharacteristic(string url)
    {
        Navigation.NavigateTo(url, true);
    }

    private void AddCharacteristic(int? parentCharacteristicId)
    {
        string url = string.Empty;
        if (parentCharacteristicId.HasValue)
        {
            url = $"/characteristics/{parentCharacteristicId}/addCharacteristic";
        }
        else
        {
            url = "/characteristics/addCharacteristic";
        }
        Navigation.NavigateTo(url);
    }

    private string FormatStringForBreadcrumb(string str)
    {
        if (str.Length > 15)
        {
            return $"{str.Substring(0, 15)}...";
        }

        return str;
    }

    private async Task DisplayClosedChanged(object Sender, bool newValue)
    {
        _displayClosedOnly = newValue;
        await GetCharacteristicsAsync();
    }

    private string GetHasChildrenIcon(int characteristicId) 
        => HasChildren(characteristicId) ? AppIcons.ViewWithContent : AppIcons.View;

    private bool HasChildren(int characteristicId)
    {
        if (_characteristicsWithChildren is not null)
        {
            return _characteristicsWithChildren.Any(pa => pa == characteristicId);
        }

        return false;
    }

    private async Task GetCharacteristicChildrenInfo()
    {
        if (_characteristics is not null)
        {
            IEnumerable<int> characteristicsIds = _characteristics.Select(pa => pa.Id);
            _characteristicsWithChildren = 
                                await CharacteristicsService.GetIdOfCharacteristicsWithChildren(characteristicsIds.ToArray());
        }
    }
}