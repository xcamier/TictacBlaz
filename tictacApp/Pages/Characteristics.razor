@page "/characteristics"
@page "/characteristics/{ParentCharacteristicId:int}"

@using tictacApp.Interfaces
@using tictacApp.Data
@using tictacApp.Helpers

@inject IGenericCRUDServiceWithParents CharacteristicsService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar


<PageTitle>Characteristics</PageTitle>

<MudText Class="ml-2 mb-4" Typo="Typo.h5">Characteristics</MudText>
<MudBreadcrumbs Items="_path">
    <ItemTemplate Context="item">
        <MudButton Variant="Variant.Text" StartIcon="@item.Icon" Size="Size.Small" OnClick="@(() => GoToSubCharacteristic(@item.Href))">@item.Text</MudButton>
    </ItemTemplate>
</MudBreadcrumbs>

@if (_characteristics == null)
{
    <MudText Class="ml-2 mb-4" Typo="Typo.body1">Loading...</MudText>
}
else
{
    <MudPaper Class="ml-2 mr-2 pa-4 mb-4">
        <MudButton StartIcon="@AppIcons.Add" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" 
                   OnClick="@(() => AddCharacteristic(ParentCharacteristicId))" Class="d-inline-flex">Add Characteristic</MudButton>
    </MudPaper>

    <MudTable Items="@_characteristics" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
                Class="ml-2 mr-2 mt-4">
        <ColGroup>
            <col />
            @if (_canGoOneLevelAbove)
            {
                <col />
            }
            <col style="width: 120px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Primary Description</MudTh>
            @if (_canGoOneLevelAbove)
            {
                <MudTh>Secondary Description</MudTh>
            }
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Label">@context.Label</MudTd>
            @if (_canGoOneLevelAbove)
            {
                <MudTd DataLabel="Label">@context.Description</MudTd>
            }
            <MudTd DataLabel="Actions">
                @if (_canGoOneLevelAbove)
                {
                    <MudIconButton Size="@Size.Small" Icon="@AppIcons.View" OnClick="@(() => GoToSubCharacteristic(context.Id))" />
                }
                <MudIconButton Size="@Size.Small" Icon="@AppIcons.Edit" HRef="@($"/characteristics/{context.Id}/editCharacteristic")" />
                <MudIconButton Size="@Size.Small" Icon="@AppIcons.Delete" OnClick="@(async () => await DeleteCharacteristicAsync(context))" />
            </MudTd>
        </RowTemplate>
    </MudTable>

    @if (_error)
    {
        <MudAlert Class="mt-4" Severity="Severity.Error" Variant="Variant.Filled">@_errorMessage</MudAlert>
    }
}

@code {
    [Parameter]
    public int? ParentCharacteristicId { get; set; } = null;

    private List<BreadcrumbItem> _path = new List<BreadcrumbItem>();
    private Characteristic[]? _characteristics;
    private bool _loading = false;
    private bool _busy = false;
    private bool _error = false;
    private string _errorMessage = string.Empty;

    private bool _canGoOneLevelAbove = true;

    protected override async Task OnInitializedAsync()
    {
        await BuildBreadcrumb();
        await GetCharacteristicsAsync();
    }

    private async Task BuildBreadcrumb()
    {
        KeyValuePair<int, string?>[] parentProjects = 
                    await CharacteristicsService.GetParentsAsync<Characteristic>(ParentCharacteristicId);
        _path = BreadcrumbHelper.BuildBreadcrumb("Characteristics", "characteristics", parentProjects);
    }

    private async Task GetCharacteristicsAsync()
    {
        try
        {
            _loading = true;
            _characteristics = await CharacteristicsService.GetAllAsync<Characteristic>(ParentCharacteristicId);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task DeleteCharacteristicAsync(Characteristic CharacteristicToRemove)
    {
        if (_busy)
        {
            return;
        }

        try
        {
            _busy = true;

            bool res = await CharacteristicsService.DeleteAsync<Characteristic>(CharacteristicToRemove);

            ResetErrorMessage();

            if (res )
            {
                Snackbar.Add("Characteristic deleted successfully", Severity.Success);
                await GetCharacteristicsAsync();
            }
            else
            {
                Snackbar.Add("Error when deleting the Characteristic", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _busy = false;
        }
    }

    private void ResetErrorMessage()
    {
        _error = false;
        _errorMessage = string.Empty;
    }

    private void GoToSubCharacteristic(int subCharacteristicId)
    {
        GoToSubCharacteristic($"/characteristics/{subCharacteristicId}");
    }

    private void GoToSubCharacteristic(string url)
    {
        Navigation.NavigateTo(url, true);
    }

    private void AddCharacteristic(int? parentCharacteristicId)
    {
        string url = string.Empty;
        if (parentCharacteristicId.HasValue)
        {
            url = $"/characteristics/{parentCharacteristicId}/addCharacteristic";
        }
        else
        {
            url = "/characteristics/addCharacteristic";
        }
        Navigation.NavigateTo(url);
    }

    private string FormatStringForBreadcrumb(string str)
    {
        if (str.Length > 15)
        {
            return $"{str.Substring(0, 15)}...";
        }

        return str;
    }
}